use lalrpop_util::ParseError;
use bstr::{BStr, BString, ByteSlice};
use crate::lexer::{Token};
use crate::ast::{
    self,
    Expr, BinopKind, UnopKind, Var, TypeKind, Ident,
    Stmt, StmtBody, StmtGoto, StmtLabel, CondKind, CondBlock, Block,
    Item, FuncKeyword, FileListKeyword, AssignOpKind,
    DifficultyLabel,
};
use crate::lalrparser_util::{parse_ascii, i32_from_ascii_radix};

// Add the input as an argument to the `.parse()` function.
//
// We don't actually use this argument at all; this is just to give us a way
// to declare the 'input lifetime.
grammar<'input>();

extern {
    type Location = usize;
    type Error = crate::parse::ErrorPayload;

    enum Token<'input> {
        // Terminals
        STRING => Token::LitString(<&'input BStr>),
        FLOAT => Token::LitFloat(<&'input BStr>),
        FLOAT_RAD => Token::LitRad(<&'input BStr>),
        INT => Token::LitIntDec(<&'input BStr>),
        INT_HEX => Token::LitIntHex(<&'input BStr>),
        INT_BIN => Token::LitIntBin(<&'input BStr>),
        DIFFICULTY => Token::Difficulty(<&'input BStr>),
        IDENT => Token::Ident(<&'input BStr>),
        "," => Token::Comma,
        "?" => Token::Question,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "@" => Token::AtSign,
        "..." => Token::Ellipsis,
        "." => Token::Dot,
        "=" => Token::Eq,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "^" => Token::Caret,
        "|" => Token::Or,
        "&" => Token::And,
        "+=" => Token::PlusEq,
        "-=" => Token::MinusEq,
        "*=" => Token::StarEq,
        "/=" => Token::SlashEq,
        "%=" => Token::PercentEq,
        "^=" => Token::CaretEq,
        "|=" => Token::OrEq,
        "&=" => Token::AndEq,
        "==" => Token::EqEq,
        "!=" => Token::NotEq,
        "<" => Token::Less,
        "<=" => Token::LessEq,
        ">" => Token::Greater,
        ">=" => Token::GreaterEq,
        "!" => Token::Not,
        "||" => Token::OrOr,
        "&&" => Token::AndAnd,
        "--" => Token::MinusMinus,
        "$" => Token::Cash,
        "anim" => Token::Anim,
        "ecli" => Token::Ecli,
        "sub" => Token::Sub,
        "timeline" => Token::Timeline,
        "script" => Token::Script,
        "var" => Token::Var,
        "int" => Token::Int,
        "float" => Token::Float,
        "void" => Token::Void,
        "inline" => Token::Inline,
        "insdef" => Token::Insdef,
        "return" => Token::Return,
        "goto" => Token::Goto,
        "if" => Token::If,
        "else" => Token::Else,
        "unless" => Token::Unless,
        "do" => Token::Do,
        "while" => Token::While,
        "times" => Token::Times,
        "break" => Token::Break,
        "switch" => Token::Switch,
        "case" => Token::Case,
        "default" => Token::Default,
        "async" => Token::Async,
        "global" => Token::Global,
        "false" => Token::False,
        "true" => Token::True,
        // Virtual tokens for parsable nonterminals
        Dispatch_Item => Token::VirtualDispatch(crate::parse::AnythingTag::Item),
        Dispatch_Stmt => Token::VirtualDispatch(crate::parse::AnythingTag::Stmt),
        Dispatch_Expr => Token::VirtualDispatch(crate::parse::AnythingTag::Expr),
        Dispatch_Var => Token::VirtualDispatch(crate::parse::AnythingTag::Var),
        Dispatch_Ident => Token::VirtualDispatch(crate::parse::AnythingTag::Ident),
    }
}

// =================================================
// Parser dispatch

/// The parser's "designated driver."
///
/// Each nonterminal marked 'pub' in a lalrpop file generates an independent parser,
/// and the code sharing between them is inefficient. Thus, one can reduce compile
/// times a pretty fair deal by only having one public parser, which dispatches
/// to other nonterminals based on a virtual token inserted by the caller at
/// the beginning of the token stream.
///
/// Don't use this directly; use the [`crate::parse::Parse`] trait, which takes
/// care of all the silly virtual dispatch business.
pub Anything: crate::parse::AnythingValue = {
    Dispatch_Item <x:Item> => crate::parse::AnythingValue::Item(x),
    Dispatch_Ident <x:Ident> => crate::parse::AnythingValue::Ident(x),
    Dispatch_Expr <x:Expr> => crate::parse::AnythingValue::Expr(*x),
    Dispatch_Stmt <x:Stmt> => crate::parse::AnythingValue::Stmt(x),
    Dispatch_Var <x:Var> => crate::parse::AnythingValue::Var(x),
};

// =================================================
// Items

Item: Item = {
    <inline:"inline"?> <keyword:FuncKeyword> <name:Ident>
        "(" <params:SeparatedTrailing<(<ParamTypeKeyword> <Ident>), ",">> ")"
        <code:FuncBodyOrSemicolon>
        => Item::Func { inline: inline.is_some(), keyword, name, params, code },
    <keyword:FileListKeyword> "{" <files:(<LitString> ";")*> "}"
        => Item::FileList { keyword, files },
};

FuncKeyword: FuncKeyword = {
    "int" => FuncKeyword::Type(TypeKind::Int),
    "float" => FuncKeyword::Type(TypeKind::Float),
    "void" => FuncKeyword::Type(TypeKind::Void),
    "sub" => FuncKeyword::Sub,
    "timeline" => FuncKeyword::Timeline,
    "script" => FuncKeyword::Script,
};

FuncBodyOrSemicolon: Option<Block> = {
    ";" => None,
    <code:Block> => Some(code),
};

ParamTypeKeyword: TypeKind = {
    "int" => TypeKind::Int,
    "float" => TypeKind::Float,
};

FileListKeyword: FileListKeyword = {
    "anim" => FileListKeyword::Anim,
    "ecli" => FileListKeyword::Ecli,
};

// ==================================================
// Statements

Stmt: Stmt = {
    <labels:StmtLabel*> <body:StmtBody> => Stmt { labels, body },
};

StmtBody: StmtBody = {
    <chain: CondChain> => StmtBody::CondChain(chain),
    <kind:CondKeyword> "(" <cond:Expr> ")" <jump:StmtGoto> ";" => StmtBody::CondJump { kind, cond, jump },
    "do" <block:StmtOrBlock> "while" "(" <cond:Expr> ")" ";" => StmtBody::While { is_do_while: true, cond, block },
    "while" "(" <cond:Expr> ")" <block:StmtOrBlock> => StmtBody::While { is_do_while: false, cond, block },
    "times" "(" <count:Expr> ")" <block:StmtOrBlock> => StmtBody::Times { count, block },
    <jump:StmtGoto> ";" => StmtBody::Jump(jump),
    <e:Expr> ";" => StmtBody::Expr(e),
    <var:Var> <op:OpAssign> <value:Expr> ";" => StmtBody::Assignment { var, op, value },
    <ty:StmtDeclarationKeyword> <vars:SeparatedStrict<StmtDeclarationListItem, ",">> ";" => {
        StmtBody::Declaration { ty, vars }
    },
    StmtSpecialCall,
}

StmtLabel: StmtLabel = {
    "+" <dt:LitInt> ":" => StmtLabel::AddTime(dt),
    <t:LitInt> ":" => StmtLabel::SetTime(t),
    "-" <t:LitInt> ":" => StmtLabel::SetTime(-t),
    <name:Ident> ":" => StmtLabel::Label(name),
    "!" <flags:DifficultyLabel> => StmtLabel::Difficulty { flags, temporary: false },
    "!" <flags:DifficultyLabel> ":" =>  StmtLabel::Difficulty { flags, temporary: true },
};

JumpDestinationTime: i32 = {
    "@" <LitInt>,
};

StmtGoto: StmtGoto = {
    "goto" <destination:Ident> <time:("@" <LitInt>)?> => StmtGoto { destination, time },
};

StmtSpecialCall: StmtBody = {
    // handle cases where at least one of the '@' or 'async' are present
    "@" <call_parts:ExprCallParts> <async_:CallAsyncKind?> ";" => {
        let (func, args) = call_parts;
        StmtBody::CallSub { at_symbol: true, func, args, async_ }
    },
    <call_parts:ExprCallParts> <async_:CallAsyncKind> ";" => {
        let (func, args) = call_parts;
        StmtBody::CallSub { at_symbol: true, func, args, async_: Some(async_) }
    },
};

CallAsyncKind: ast::CallAsyncKind = {
    "async" => ast::CallAsyncKind::CallAsync,
    "async" <id:Expr> => ast::CallAsyncKind::CallAsyncId(id),
};

StmtDeclarationKeyword: Option<TypeKind> = {
    "int" => Some(TypeKind::Int),
    "float" => Some(TypeKind::Float),
    "var" => None,
};

StmtDeclarationListItem: (Ident, Option<Box<Expr>>) = {
    <name:Ident> => (name, None),
    <name:Ident> "=" <value:Expr> => (name, Some(value)),
};

CondChain: ast::StmtCondChain = {
    <chain:CondChainWithoutElse> => chain,
    <mut chain:CondChainWithoutElse> "else" <else_block:StmtOrBlock> => {
        assert!(chain.else_block.is_none());
        chain.else_block = Some(else_block);
        chain
    },
};
CondChainWithoutElse: ast::StmtCondChain = {
    <cond_block:CondBlock> => {
        ast::StmtCondChain { cond_blocks: vec![cond_block], else_block: None }
    },
    <mut chain:CondChainWithoutElse> "else" <cond_block:CondBlock> => {
        chain.cond_blocks.push(cond_block);
        chain
    },
};

CondBlock: CondBlock = {
    <kind:CondKeyword> "(" <cond:Expr> ")" <block:StmtOrBlock> => CondBlock { kind, cond, block },
};

// block for an 'if', 'while', etc.
StmtOrBlock: Block = {
    // FIXME: Todo: single statement.  (creates ambiguous grammar, how to fix?)
//    <st:Stmt> => vec![st],
    Block,
};

CondKeyword: CondKind = {
    "if" => CondKind::If,
    "unless" => CondKind::Unless,
};

DifficultyLabel: DifficultyLabel = {
    // TODO: Actually parse
    <s:DIFFICULTY> => s["!".len()..].to_owned(),
};

Block: Block = {
    "{" <code:Stmt+> "}" => Block(code),
};

// ==================================================
// Expressions

// Precedence is encoded in the use of these macros
RightTernary<NextTier>: Box<Expr> = {
    <cond:NextTier>
        "?" <left:NextTier>
        ":" <right:RightTernary<NextTier>>
        => Box::new(Expr::Ternary { cond, left, right }),
    NextTier,
};
LeftBinop<Op, NextTier>: Box<Expr> = {
    <a:LeftBinop<Op, NextTier>> <op:Op> <b:NextTier> => Box::new(Expr::Binop(a, op, b)),
    NextTier,
};
LeftUnop<Op, NextTier>: Box<Expr> = {
    // no recursion; only allow one unary op
    <op:Op> <e:NextTier> => Box::new(Expr::Unop(op, e)),
    NextTier,
};

Expr: Box<Expr> = ExprWithOpers;

// Operator precedence table
ExprWithOpers = ExprTernary;
ExprTernary = RightTernary<ExprBinopOr>;
ExprBinopOr = LeftBinop<OpOr, ExprBinopAnd>;
ExprBinopAnd = LeftBinop<OpAnd, ExprBinopBitOr>;
ExprBinopBitOr = LeftBinop<OpBitOr, ExprBinopBitXor>;
ExprBinopBitXor = LeftBinop<OpBitXor, ExprBinopBitAnd>;
ExprBinopBitAnd = LeftBinop<OpBitAnd, ExprBinopCmpEq>;
ExprBinopCmpEq = LeftBinop<OpCmpEq, ExprBinopCmpOrd>;
ExprBinopCmpOrd = LeftBinop<OpCmpOrd, ExprBinopAddLike>;
ExprBinopAddLike = LeftBinop<OpAddLike, ExprBinopMulLike>;
ExprBinopMulLike = LeftBinop<OpMulLike, ExprUnop>;
ExprUnop = LeftUnop<OpLeftUnary, ExprTerm>;

OpOr: BinopKind = "||" => BinopKind::LogicOr;
OpAnd: BinopKind = "&&" => BinopKind::LogicAnd;
OpBitOr: BinopKind = "|" => BinopKind::BitOr;
OpBitXor: BinopKind = "^" => BinopKind::BitXor;
OpBitAnd: BinopKind = "&" => BinopKind::BitAnd;
OpCmpEq: BinopKind = {
    "==" => BinopKind::Eq,
    "!=" => BinopKind::Ne,
};
OpCmpOrd: BinopKind = {
    ">" => BinopKind::Gt,
    "<" => BinopKind::Lt,
    ">=" => BinopKind::Ge,
    "<=" => BinopKind::Le,
};
OpAddLike: BinopKind = {
    "+" => BinopKind::Add,
    "-" => BinopKind::Sub,
};
OpMulLike: BinopKind = {
    "*" => BinopKind::Mul,
    "/" => BinopKind::Div,
    "%" => BinopKind::Rem,
};
OpAssign: AssignOpKind = {
    "=" => AssignOpKind::Assign,
    "+=" => AssignOpKind::Add,
    "-=" => AssignOpKind::Sub,
    "*=" => AssignOpKind::Mul,
    "/=" => AssignOpKind::Div,
    "%=" => AssignOpKind::Rem,
    "|=" => AssignOpKind::BitOr,
    "^=" => AssignOpKind::BitXor,
    "&=" => AssignOpKind::BitAnd,
};
#[inline] OpLeftUnary: UnopKind = {
    "-" => UnopKind::Neg,
    "!" => UnopKind::Not,
};

// Expressions that don't contain a toplevel operator
ExprTerm: Box<Expr> = {
    "(" <e:Expr> ")" => e,
    <call_parts:ExprCallParts> => {
        let (func, args) = call_parts;
        Box::new(Expr::Call { func, args })
    },
    <v:Var> => Box::new(Expr::Var(v)),
    <x:LitInt> => Box::new(Expr::LitInt(x)),
};

ExprCallParts: (Ident, Vec<Box<Expr>>) = {
    <Ident> "(" <SeparatedTrailing<Expr, ",">> ")",
};

// ==================================================

LitString: BString = {
    <s:STRING> =>? {
        let mut out = vec![];
        let mut escape = false;
        for b in s[1..s.len()-1].bytes() { // FIXME input should be &[u8] instead of &str
            if escape {
                escape = false;
                match b {
                    b'0' => out.push(b'\0'),
                    b'"' => out.push(b'"'),
                    b'\\' => out.push(b'\\'),
                    b'n' => out.push(b'\n'),
                    b'r' => out.push(b'\r'),
                    _ => return Err(ParseError::User {
                        error: "invalid escape",
                    }),
                }
            } else {
                out.push(b);
            }
        }
        Ok(out.into())
    },
};

LitFloat: f32 = {
    <mut s:FLOAT> => {
        if s.ends_with(b"f") || s.ends_with(b"F") {
            s = &s[..s.len()-1];
        }
        parse_ascii(s).unwrap()
    },
    <mut s:FLOAT_RAD> => {
        s = &s[b"rad(".len()..];
        s = &s[..s.len()-b")".len()];
        if s.ends_with(b"f") || s.ends_with(b"F") {
            s = &s[..s.len()-1];
        }
        parse_ascii::<_, f32>(s).unwrap().to_radians()
    },
};

LitInt: i32 = {
    // FIXME: Don't panic on big numbers
    <s:INT> => parse_ascii(s).unwrap(),
    <s:INT_HEX> => i32_from_ascii_radix(&s[2..], 16).unwrap(),
    <s:INT_BIN> => i32_from_ascii_radix(&s[2..], 2).unwrap(),
    "true" => 1,
    "false" => 0,
};

// ==================================================
// Variables

Var: Var = {
    <ident:Ident> => Var::Named { ty: None, ident },
    "$" <ident:Ident> => Var::Named { ty: Some(TypeKind::Int), ident },
    "%" <ident:Ident> => Var::Named { ty: Some(TypeKind::Float), ident },
    "[" <sign:OptionalMinus> <x:LitInt> "]" =>? {
        Ok(Var::Unnamed { ty: TypeKind::Int, number: i32::wrapping_mul(x, sign) })
    },
    "[" <sign:OptionalMinus> <x:LitFloat> "]" =>? {
        if x < i32::min_value() as f32 || x > i32::max_value() as f32 {
            return Err(ParseError::User { error: "variable ID overflow" })
        }
        let number = i32::wrapping_mul(x as i32, sign);
        if number as f32 != x * sign as f32 {
            return Err(ParseError::User { error: "non-integer variable ID" })
        }
        Ok(Var::Unnamed { ty: TypeKind::Float, number })
    },
};

OptionalMinus: i32 = {
    "-" => -1,
    => 1,
};

Ident: Ident = {
    <tok:IDENT> => Ident { ident: tok.to_owned() },
};

// ==================================================
// Utility

/// Parse a separated sequence with an optional trailing separator.
SeparatedTrailing<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
    <SeparatedStrictNonempty<T, Sep>> Sep,
};

/// Parse a separated sequence with no trailing separator.
SeparatedStrict<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
};
SeparatedStrictNonempty<T, Sep>: Vec<T> = {
    <x:T> => vec![x],
    <mut xs:SeparatedStrictNonempty<T, Sep>> Sep <x:T> => {
        xs.push(x);
        xs
    },
};
