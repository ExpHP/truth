use bstr::{BStr, ByteSlice};
use crate::error::CompileError;
use crate::parse::lexer::{Token};
use crate::meta::{self, Meta};
use crate::ident::{Ident, ResIdent};
use crate::pos::{Sp, Span};
use crate::ast;
use super::lalrparser_util::{parse_ascii, u32_from_ascii_radix, push};

grammar<'input, 'st>(state: &'st mut crate::parse::State);

extern {
    type Location = crate::parse::lexer::Location;
    type Error = CompileError;

    enum Token<'input> {
        // Terminals
        STRING => Token::LitString(<&'input BStr>),
        FLOAT => Token::LitFloat(<&'input BStr>),
        FLOAT_RAD => Token::LitRad(<&'input BStr>),
        INT => Token::LitIntDec(<&'input BStr>),
        INT_HEX => Token::LitIntHex(<&'input BStr>),
        INT_BIN => Token::LitIntBin(<&'input BStr>),
        DIFFICULTY => Token::Difficulty(<&'input BStr>),
        INSTR => Token::Instr(<&'input BStr>),
        IDENT => Token::Ident(<&'input BStr>),
        "," => Token::Comma,
        "?" => Token::Question,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "@" => Token::AtSign,
        "..." => Token::Ellipsis,
        "." => Token::Dot,
        "=" => Token::Eq,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "^" => Token::Caret,
        "|" => Token::Or,
        "&" => Token::And,
        "+=" => Token::PlusEq,
        "-=" => Token::MinusEq,
        "*=" => Token::StarEq,
        "/=" => Token::SlashEq,
        "%=" => Token::PercentEq,
        "^=" => Token::CaretEq,
        "|=" => Token::OrEq,
        "&=" => Token::AndEq,
        "==" => Token::EqEq,
        "!=" => Token::NotEq,
        "<" => Token::Less,
        "<=" => Token::LessEq,
        ">" => Token::Greater,
        ">=" => Token::GreaterEq,
        "!" => Token::Not,
        "||" => Token::OrOr,
        "&&" => Token::AndAnd,
        "--" => Token::MinusMinus,
        "$" => Token::Cash,
        "#" => Token::Hash,
        "anim" => Token::Anim,
        "ecli" => Token::Ecli,
        "meta" => Token::Meta,
        "sub" => Token::Sub,
        "timeline" => Token::Timeline,
        "script" => Token::Script,
        "entry" => Token::Entry,
        "var" => Token::Var,
        "int" => Token::Int,
        "float" => Token::Float,
        "void" => Token::Void,
        "inline" => Token::Inline,
        "insdef" => Token::Insdef,
        "return" => Token::Return,
        "goto" => Token::Goto,
        "loop" => Token::Loop,
        "if" => Token::If,
        "else" => Token::Else,
        "unless" => Token::Unless,
        "do" => Token::Do,
        "while" => Token::While,
        "times" => Token::Times,
        "break" => Token::Break,
        "switch" => Token::Switch,
        "case" => Token::Case,
        "default" => Token::Default,
        "interrupt" => Token::Interrupt,
        "async" => Token::Async,
        "global" => Token::Global,
        "false" => Token::False,
        "true" => Token::True,
        "pragma" => Token::Pragma,
        "mapfile" => Token::Mapfile,
        "image_source" => Token::ImageSource,
        "sin" => Token::Sin,
        "cos" => Token::Cos,
        "sqrt" => Token::Sqrt,
        "_S" => Token::CastI,
        "_f" => Token::CastF,
        // Virtual tokens for parsable nonterminals
        Dispatch_Script => Token::VirtualDispatch(crate::parse::AnythingTag::Script),
        Dispatch_Item => Token::VirtualDispatch(crate::parse::AnythingTag::Item),
        Dispatch_Block => Token::VirtualDispatch(crate::parse::AnythingTag::Block),
        Dispatch_Stmt => Token::VirtualDispatch(crate::parse::AnythingTag::Stmt),
        Dispatch_Expr => Token::VirtualDispatch(crate::parse::AnythingTag::Expr),
        Dispatch_Var => Token::VirtualDispatch(crate::parse::AnythingTag::Var),
        Dispatch_LitString => Token::VirtualDispatch(crate::parse::AnythingTag::LitString),
        Dispatch_Meta => Token::VirtualDispatch(crate::parse::AnythingTag::Meta),
    }
}

// =================================================
// Parser dispatch

/// The parser's "designated driver."
///
/// Each nonterminal marked 'pub' in a lalrpop file generates an independent parser,
/// and the code sharing between them is inefficient. Thus, one can reduce compile
/// times a pretty fair deal by only having one public parser, which dispatches
/// to other nonterminals based on a virtual token inserted by the caller at
/// the beginning of the token stream.
///
/// Don't use this directly; use the [`crate::parse::Parse`] trait, which takes
/// care of all the silly virtual dispatch business.
pub(crate) Anything: Sp<crate::parse::AnythingValue> = Sp<AnythingInner>;

AnythingInner: crate::parse::AnythingValue = {
    Dispatch_Script <x:Script> => crate::parse::AnythingValue::Script(x),
    Dispatch_Item <x:Item> => crate::parse::AnythingValue::Item(x),
    Dispatch_Block <x:Block> => crate::parse::AnythingValue::Block(x),
    Dispatch_Stmt <x:Stmt> => crate::parse::AnythingValue::Stmt(x),
    Dispatch_Expr <x:Expr> => crate::parse::AnythingValue::Expr(x),
    Dispatch_Var <x:Var> => crate::parse::AnythingValue::Var(x),
    Dispatch_LitString <x:LitString> => crate::parse::AnythingValue::LitString(x),
    Dispatch_Meta <x:Meta> => crate::parse::AnythingValue::Meta(x),
};

// =================================================
// Items

Script: ast::Script = {
    <items:Items> => {
        let mapfiles = state.mapfiles.clone();
        let image_sources = state.image_sources.clone();
        ast::Script { items, mapfiles, image_sources }
    }
};

Items: Vec<Sp<ast::Item>> = {
    => vec![],

    <items:Items> <item:Sp<Item>> => push(items, item),

    // FIXME: this syntax likely won't stay.  People might be confused that it is treated
    //        in a declarative manner, and I don't know what I want our preprocessing solution
    //        to look like
    <items:Items> "#" "pragma" "mapfile" <file:Sp<LitString>> => {
        state.mapfiles.push(file);
        items
    },
    <items:Items> "#" "pragma" "image_source" <file:Sp<LitString>> => {
        state.image_sources.push(file);
        items
    },
};

Item: ast::Item = {
    <inline:TokenSpan<"inline">?> <keyword:Sp<FuncKeyword>> <ident:Sp<ResIdent>>
        "(" <params:SeparatedTrailing<(<Sp<VarDeclKeyword>> <Sp<ResIdent>>), ",">> ")"
        _TimeStackEnter <code:FuncBodyOrSemicolon> _TimeStackPop
        => ast::Item::Func { inline, keyword, ident, params, code },

    <keyword:TokenSpan<"script">> <number:Sp<LitIntSigned>?> <ident:Sp<Ident>> _TimeStackEnter <code:Block> _TimeStackPop
        => ast::Item::AnmScript { keyword, number, ident, code },

    <keyword:Sp<MetaKeyword>> <ident:Sp<Ident>?> <fields:Sp<MetaBracedFields>>
        => ast::Item::Meta { keyword, ident, fields },

    <keyword:Sp<FileListKeyword>> "{" <files:(<Sp<LitString>> ";")*> "}"
        => ast::Item::FileList { keyword, files },
};

FuncKeyword: ast::FuncKeyword = {
    "int" => ast::FuncKeyword::Type(token![int]),
    "float" => ast::FuncKeyword::Type(token![float]),
    "void" => ast::FuncKeyword::Type(token![void]),
    "sub" => ast::FuncKeyword::Sub,
    "timeline" => ast::FuncKeyword::Timeline,
};

FuncBodyOrSemicolon: Option<ast::Block> = {
    ";" => None,
    <code:Block> => Some(code),
};

FileListKeyword: ast::FileListKeyword = {
    "anim" => ast::FileListKeyword::Anim,
    "ecli" => ast::FileListKeyword::Ecli,
};

MetaKeyword: ast::MetaKeyword = {
    "entry" => ast::MetaKeyword::Entry,
    "meta" => ast::MetaKeyword::Meta,
};

// NOTE: Working with state in LALRPOP is tricky as there are no midrules like bison.
//
// When working with state, you should generally prefer these non-inline versions, as the actions
// will intuitively take place at the location they appear in the grammar.
_TimeStackEnter: () = _TimeStackEnterInline;
_TimeStackPop: () = _TimeStackPopInline;
_TimeGet: i32 = _TimeGetInline;

// Sometimes, unfortunately, the above rules lead to parsing ambiguities and you may need to
// resort to these inline versions.
//
// The inline versions are only executed after the whole rule has been parsed. Thus, you should only
// ever use them at the END OF A RULE; this may require breaking a rule in half.
#[inline] _TimeStackEnterInline: () = => { state.time_stack.push(0); };
#[inline] _TimeStackPopInline: () = => { state.time_stack.pop(); };
#[inline] _TimeGetInline: i32 = => *state.time_stack.last().unwrap();

// ==================================================
// Metadata in a JSON-ish format, used by ANM

Meta: Meta = {
    <x:LitIntSigned> => Meta::Int(x),
    <x:LitFloatSigned> => Meta::Float(x),
    <x:LitString> => Meta::String(x.string),
    <x:Sp<MetaBracedFields>> => Meta::Object(x),
    <name:Sp<Ident>> ":"? <fields:Sp<MetaBracedFields>> => Meta::Variant { name, fields },
    "[" <items:SeparatedTrailing<Sp<Meta>, ",">> "]" => Meta::Array(items),
};

MetaBracedFields: meta::Fields = {
    "{" <kvs:SeparatedTrailing<(<Sp<Ident>> ":" <Sp<Meta>>), ",">> "}" =>? {
        let mut map = indexmap::IndexMap::with_capacity(kvs.len());
        for (key, value) in kvs {
            let new_key_span = key.span;
            match map.entry(key) {
                indexmap::map::Entry::Vacant(entry) => { entry.insert(value); },
                indexmap::map::Entry::Occupied(entry) => return Err(error!(
                    message("duplicate metadata field '{}'", entry.key()),
                    primary(new_key_span, "duplicate key"),
                    // FIXME: OccupiedEntry::key currently gives the new key so we can't do this
                    // secondary(entry.key().span, "previously supplied here"),
                ).into()),
            }
        }
        Ok(map)
    },
};

// ==================================================
// Statements

Stmt: ast::Stmt = {
    <stuff:StmtLabelsWithTime> <body:StmtBody>
        => ast::Stmt { time: stuff.1, body },
};

StmtBody: ast::StmtBody = {
    <keyword:TokenSpan<"return">> <value:Sp<Expr>?> ";"
        => ast::StmtBody::Return { keyword, value },

    <chain: CondChain>
        => ast::StmtBody::CondChain(chain),

    <keyword:Sp<CondKeyword>> "(" <cond:Sp<Cond>> ")" <jump:StmtGoto> ";"
        => ast::StmtBody::CondJump { keyword, cond, jump },

    <do_keyword:TokenSpan<"do">> <block:StmtOrBlock> <while_keyword:TokenSpan<"while">> "(" <cond:Sp<Cond>> ")" ";"
        => ast::StmtBody::While { do_keyword: Some(do_keyword), while_keyword, cond, block },

    <while_keyword:TokenSpan<"while">> "(" <cond:Sp<Cond>> ")" <block:StmtOrBlock>
        => ast::StmtBody::While { do_keyword: None, while_keyword, cond, block },

    <keyword:TokenSpan<"times">> "(" <clobber:(<Sp<Var>> "=")?> <count:Sp<Expr>> ")" <block:StmtOrBlock>
        => ast::StmtBody::Times { keyword, clobber, count, block },

    <keyword:TokenSpan<"loop">> <block:StmtOrBlock>
        => ast::StmtBody::Loop { keyword, block },

    <jump:StmtGoto> ";"
        => ast::StmtBody::Jump(jump),

    <e:Sp<Expr>> ";"
        => ast::StmtBody::Expr(e),

    <name:Sp<Ident>> ":"
        => ast::StmtBody::Label(name),

    "interrupt" "[" <arg:Sp<LitIntSigned>> "]" ":"
        => ast::StmtBody::InterruptLabel(arg),

    <var:Sp<Var>> <op:Sp<OpAssign>> <value:Sp<Expr>> ";"
        => ast::StmtBody::Assignment { var, op, value },

    <keyword:Sp<VarDeclKeyword>> <vars:SeparatedStrict<Sp<StmtDeclarationListItem>, ",">> ";"
        => ast::StmtBody::Declaration { keyword, vars },

    StmtSpecialCall,
}

StmtTimeLabel: () = {
    "+" <dt:LitIntUnsigned> ":" => { *state.time_stack.last_mut().expect("empty time stack?! (bug)") += dt; },
    <t:LitIntSigned> ":" => { *state.time_stack.last_mut().expect("empty time stack?! (bug)") = t; },
};

/// Read all statement labels and then get the time at the end of them.
///
/// This exists because it is obscenely difficult to make unambiguous while getting the time read correctly.
/// (though in retrospect, it does kind of make sense that the parser would have to speculatively check the
///  time after every label it parses)
StmtLabelsWithTime: (Vec<Sp<ast::StmtLabel>>, i32) = {
    <time: _TimeGetInline> => (vec![], time),
    <out:StmtLabels> StmtTimeLabel <time: _TimeGetInline> => (out, time),
    <out:StmtLabels> <label:Sp<StmtLabel>> <time: _TimeGetInline> => (push(out, label), time),
};

#[inline]
StmtLabels: Vec<Sp<ast::StmtLabel>> = <out:StmtLabelsWithTime> => out.0;

StmtLabel: ast::StmtLabel = {
    <flags:DifficultyLabel> => ast::StmtLabel::Difficulty { flags, temporary: false },
    <flags:DifficultyLabel> ":" => ast::StmtLabel::Difficulty { flags, temporary: true },
};

StmtGoto: ast::StmtGoto = {
    "goto" <destination:Sp<Ident>> <time:("@" <LitIntSigned>)?>
        => ast::StmtGoto { destination, time },
};

StmtSpecialCall: ast::StmtBody = {
    // handle cases where at least one of the '@' or 'async' are present
    "@" <func:Sp<Ident>> <args:ExprCallParenArgs> <async_:CallAsyncKind?> ";" => {
        ast::StmtBody::CallSub { at_symbol: true, func, args, async_ }
    },
    <func:Sp<Ident>> <args:ExprCallParenArgs> <async_:CallAsyncKind> ";" => {
        ast::StmtBody::CallSub { at_symbol: true, func, args, async_: Some(async_) }
    },
};

CallAsyncKind: ast::CallAsyncKind = {
    "async" => ast::CallAsyncKind::CallAsync,
    "async" <id:Box<Sp<Expr>>> => ast::CallAsyncKind::CallAsyncId(id),
};

StmtDeclarationListItem: (Sp<ast::Var>, Option<Sp<ast::Expr>>) = {
    <var:Sp<VarIdent>> => (var, None),
    <var:Sp<VarIdent>> "=" <value:Sp<Expr>> => (var, Some(value)),
};

CondChain: ast::StmtCondChain = {
    <chain:CondChainWithoutElse> => chain,
    <mut chain:CondChainWithoutElse> "else" <else_block:StmtOrBlock> => {
        assert!(chain.else_block.is_none());
        chain.else_block = Some(else_block);
        chain
    },
};
CondChainWithoutElse: ast::StmtCondChain = {
    <cond_block:Sp<CondBlock>> => {
        ast::StmtCondChain { cond_blocks: vec![cond_block], else_block: None }
    },
    <mut chain:CondChainWithoutElse> "else" <cond_block:Sp<CondBlock>> => {
        chain.cond_blocks.push(cond_block);
        chain
    },
};

CondBlock: ast::CondBlock = {
    <keyword:Sp<CondKeyword>> "(" <cond:Sp<Cond>> ")" <block:StmtOrBlock>
        => ast::CondBlock { keyword, cond, block },
};

Cond: ast::Cond = {
    "--" <var:Sp<Var>> => ast::Cond::PreDecrement(var),
    <expr:Sp<Expr>> => ast::Cond::Expr(expr),
};

// block for an 'if', 'while', etc.
StmtOrBlock: ast::Block = {
    // FIXME: Todo: single statement.  (creates ambiguous grammar, how to fix?)
//    <st:Stmt> => vec![st],
    Block,
};

CondKeyword: ast::CondKeyword = {
    "if" => token![if],
    "unless" => token![unless],
};

DifficultyLabel: ast::DifficultyLabel = {
    // TODO: Actually parse
    <l: @L> <s:DIFFICULTY> <r: @R> =>? Err(error!(
        message("unsupported syntax"),
        primary(Span::from_locs(l, r), "difficulty flags not yet implemented"),
    ).into()),
};

Block: ast::Block = {
    "{" <start_span:Span> <start_time:_TimeGet> <mut code:Sp<Stmt>*>
        <end_labels:Sp<StmtLabels>> <end_time:_TimeGet> <end_span:Span> "}"
        => {
        // bookend with empty statements to simplify time and jump logic
        code.insert(0, sp!(start_span => ast::Stmt {
            time: start_time,
            body: ast::StmtBody::NoInstruction,
        }));
        code.push(sp!(end_labels.span => ast::Stmt {
            time: end_time,
            body: ast::StmtBody::NoInstruction,
        }));
        ast::Block(code)
    },
};

// ==================================================
// Expressions

// Precedence is encoded in the use of these macros
RightTernary<NextTier>: ast::Expr = {
    <cond:Box<Sp<NextTier>>>
        <question:TokenSpan<"?">> <left:Box<Sp<NextTier>>>
        <colon:TokenSpan<":">> <right:Box<Sp<RightTernary<NextTier>>>>
        => ast::Expr::Ternary { cond, left, right, question, colon },
    NextTier,
};
LeftBinop<Op, NextTier>: ast::Expr = {
    <a:Box<Sp<LeftBinop<Op, NextTier>>>>
        <op:Sp<Op>>
        <b:Box<Sp<NextTier>>>
        => ast::Expr::Binop(a, op, b),
    NextTier,
};
LeftUnop<Op, NextTier>: ast::Expr = {
    // no recursion; only allow one unary op
    <op:Sp<Op>> <e:Box<Sp<NextTier>>> => ast::Expr::Unop(op, e),
    NextTier,
};

Expr: ast::Expr = ExprWithOpers;

// Operator precedence table
ExprWithOpers = ExprTernary;
ExprTernary = RightTernary<ExprBinopOr>;
ExprBinopOr = LeftBinop<OpOr, ExprBinopAnd>;
ExprBinopAnd = LeftBinop<OpAnd, ExprBinopBitOr>;
ExprBinopBitOr = LeftBinop<OpBitOr, ExprBinopBitXor>;
ExprBinopBitXor = LeftBinop<OpBitXor, ExprBinopBitAnd>;
ExprBinopBitAnd = LeftBinop<OpBitAnd, ExprBinopCmpEq>;
ExprBinopCmpEq = LeftBinop<OpCmpEq, ExprBinopCmpOrd>;
ExprBinopCmpOrd = LeftBinop<OpCmpOrd, ExprBinopAddLike>;
ExprBinopAddLike = LeftBinop<OpAddLike, ExprBinopMulLike>;
ExprBinopMulLike = LeftBinop<OpMulLike, ExprUnop>;
ExprUnop = LeftUnop<OpLeftUnary, ExprTerm>;

OpOr: ast::BinopKind = "||" => token![||];
OpAnd: ast::BinopKind = "&&" => token![&&];
OpBitOr: ast::BinopKind = "|" => token![|];
OpBitXor: ast::BinopKind = "^" => token![^];
OpBitAnd: ast::BinopKind = "&" => token![&];
OpCmpEq: ast::BinopKind = {
    "==" => token![==],
    "!=" => token![!=],
};
OpCmpOrd: ast::BinopKind = {
    ">" => token![>],
    "<" => token![<],
    ">=" => token![>=],
    "<=" => token![<=],
};
OpAddLike: ast::BinopKind = {
    "+" => token![+],
    "-" => token![-],
};
OpMulLike: ast::BinopKind = {
    "*" => token![*],
    "/" => token![/],
    "%" => token![%],
};
OpAssign: ast::AssignOpKind = {
    "=" => token![=],
    "+=" => token![+=],
    "-=" => token![-=],
    "*=" => token![*=],
    "/=" => token![/=],
    "%=" => token![%=],
    "|=" => token![|=],
    "^=" => token![^=],
    "&=" => token![&=],
};
#[inline] OpLeftUnary: ast::UnopKind = {
    "-" => token![-],
    "!" => token![!],
};

FuncUnopKeyword: ast::UnopKind = {
    "sin" => token![sin],
    "cos" => token![cos],
    "sqrt" => token![sqrt],
    "_S" => token![_S],
    "_f" => token![_f],
};

// Expressions that don't contain a toplevel operator
ExprTerm: ast::Expr = {
    "(" <e:Expr> ")" => e,

    <op:Sp<FuncUnopKeyword>> "(" <e:Box<Sp<Expr>>> ")"
        => ast::Expr::Unop(op, e),

    <name:Sp<CallableName>> <args:ExprCallParenArgs>
        => ast::Expr::Call { name, args },

    <v:Sp<Var>> => ast::Expr::Var(v),

    <value:LitIntUnsigned> => ast::Expr::LitInt { value, hex: false },

    <value:LitFloatUnsigned> => ast::Expr::LitFloat { value },

    <x:LitString> => ast::Expr::LitString(x),

    // This syntax is reserved.
    // The only reason we parse it right now is just to prove that adding it wouldn't make the grammar ambiguous.
    <l: @L> <_v: Var> "[" <_e: Expr> "]" <r: @R> =>? Err(error!(
        message("invalid operation"),
        primary(Span::from_locs(l, r), "array indexing is not a thing, sorry"),
    ).into()),
};

#[inline]
CallableName: ast::CallableName = {
    <ident:ResIdent> => ast::CallableName::Normal { ident },
    <opcode:RawInsIdent> => ast::CallableName::Ins { opcode },
};

ExprCallParenArgs: Vec<Sp<ast::Expr>> = {
    "(" <SeparatedTrailing<Sp<Expr>, ",">> ")",
};

// ==================================================

LitString: ast::LitString = {
    <l: @L> <s:STRING> <r: @R> =>? {
        let mut out = vec![];
        let mut escape = false;
        for b in s[1..s.len()-1].bytes() {
            if escape {
                escape = false;
                match b {
                    b'0' => out.push(b'\0'),
                    b'"' => out.push(b'"'),
                    b'\\' => out.push(b'\\'),
                    b'n' => out.push(b'\n'),
                    b'r' => out.push(b'\r'),
                    c => {
                        let escape = match c.is_ascii_graphic() {
                            true => format!("{}", c as char),
                            false => format!("\\x{:02x}", c),
                        };
                        return Err(error!(
                            message("invalid escape character '{}'", escape),
                            primary(Span::from_locs(l, r), "contains invalid escape"),
                        ).into());
                    }
                }
            } else if b == b'\\' {
                escape = true;
            } else {
                out.push(b);
            }
        }
        assert!(!escape);  // should be impossible due to the token's regex
        Ok(ast::LitString { string: out.into() })
    },
};

LitFloatSigned: f32 = {
    "-" <x:LitFloatUnsigned> => -x,
    <x:LitFloatUnsigned> => x,
};

LitIntSigned: i32 = {
    "-" <x:LitIntUnsigned> => i32::wrapping_neg(x),
    <x:LitIntUnsigned> => x,
};

LitFloatUnsigned: f32 = {
    <mut s:FLOAT> => {
        if s.ends_with(b"f") || s.ends_with(b"F") {
            s = &s[..s.len()-1];
        }
        parse_ascii(s).unwrap()
    },
    <mut s:FLOAT_RAD> => {
        s = &s[b"rad(".len()..];
        s = &s[..s.len()-b")".len()];
        if s.ends_with(b"f") || s.ends_with(b"F") {
            s = &s[..s.len()-1];
        }
        parse_ascii::<_, f32>(s).unwrap().to_radians()
    },
};

LitIntUnsigned: i32 = {
    <l: @L> <result: LitIntUnsigned_Result> <r: @R> =>? {
        // Note: Parsing numbers in the range 2^31..2^32 without overflow errors is deliberately supported
        result.map(|x: u32| x as i32)
            .map_err(|e| error!(
                message("bad integer literal"),
                primary(Span::from_locs(l, r), "{}", e)
            ).into())
    },
};

LitIntUnsigned_Result: Result<u32, std::num::ParseIntError> = {
    <l: @L> <s:INT> <r: @R> => {
        #![allow(unused_braces)]  // without these braces, lalrpop can't parse this turbofish
        parse_ascii::<_, u32>(s)
    },
    <l: @L> <s:INT_HEX> <r: @R> => u32_from_ascii_radix(&s[2..], 16),
    <l: @L> <s:INT_BIN> <r: @R> => u32_from_ascii_radix(&s[2..], 2),
    "true" => Ok(1),
    "false" => Ok(0),
};

// ==================================================
// Variables

Var: ast::Var = {
    VarIdent,
    "$" <ident:ResIdent> => ast::Var::Named { ty_sigil: Some(ast::VarReadType::Int), ident },
    "%" <ident:ResIdent> => ast::Var::Named { ty_sigil: Some(ast::VarReadType::Float), ident },
    "[" <sign:OptionalMinus> <x:LitIntUnsigned> "]" =>? {
        Ok(ast::Var::Reg { ty_sigil: ast::VarReadType::Int, reg: i32::wrapping_mul(x, sign).into() })
    },
    <l: @L> "[" <sign:OptionalMinus> <x:LitFloatUnsigned> "]" <r: @R> =>? {
        if x < i32::min_value() as f32 || x > i32::max_value() as f32 {
            return Err(error!(
                message("register ID overflow"),
                primary(Span::from_locs(l, r), "register ID overflow")
            ).into());
        }
        let reg = i32::wrapping_mul(x as i32, sign);
        if reg as f32 != x * sign as f32 {
            return Err(error!(
                message("non-integer register ID"),
                primary(Span::from_locs(l, r), "non-integer register ID")
            ).into());
        }
        Ok(ast::Var::Reg {
            ty_sigil: ast::VarReadType::Float,
            reg: reg.into(),
        })
    },
};

VarIdent: ast::Var = <ident:ResIdent> => ast::Var::Named { ty_sigil: None, ident };

VarDeclKeyword: ast::VarDeclKeyword = {
    "int" => token![int],
    "float" => token![float],
    "var" => token![var],
};

OptionalMinus: i32 = {
    "-" => -1,
    => 1,
};

#[inline]
ResIdent: ResIdent = <ident:Ident> => ident.into();

Ident: Ident = {
    <l: @L> <tok:IdentStr> <r: @R> => {
        std::str::from_utf8(&tok[..]).expect("cannot fail because lexed token is ascii")
            .parse().expect("cannot fail; ASCII, and ins_ is parsed elsewhere")
    },
};

IdentStr: &'input BStr = {
    // obviously
    IDENT,
    // contextual keywords
    <s: "mapfile"> => s.as_static_bstr().unwrap(),
    <s: "entry"> => s.as_static_bstr().unwrap(),
    <s: "anim"> => s.as_static_bstr().unwrap(),
    <s: "ecli"> => s.as_static_bstr().unwrap(),
    <s: "timeline"> => s.as_static_bstr().unwrap(),
    <s: "script"> => s.as_static_bstr().unwrap(),
};

RawInsIdent: u16 = {
    <l:@L> <ins_ident:INSTR> <r:@R> =>? {
        use regex::bytes::Regex;
        lazy_static::lazy_static!{
            static ref CANONICAL_INT_RE: Regex = Regex::new("^(0|[1-9][0-9]*)$").unwrap();
        }

        assert!(ins_ident.starts_with(b"ins_"));
        let num_str = &ins_ident[b"ins_".len()..];
        if !CANONICAL_INT_RE.is_match(num_str) {
            return Err(error!(
                message("invalid instruction identifier"),
                primary(Span::from_locs(l, r), "invalid instruction identifier"),
                note(r#"identifiers beginning with 'ins_' must end in a canonically-formatted integer, e.g. 'ins_42'."#),
            ).into());
        }

        std::str::from_utf8(num_str).expect("known ascii").parse()
            // this error is mostly for overflow
            .map_err(|e| error!(
                message("invalid instruction identifier"),
                primary(Span::from_locs(l, r), "{}", e),
            ).into())
    }
};

// ==================================================
// Utility

/// Parse something while obtaining its span.
#[inline]
Sp<Rule>: Sp<Rule> = {
    <l: @L> <rule: Rule> <r: @R> => Sp {
        span: Span::from_locs(l, r),
        value: rule,
    },
}
/// Get a zero-length span at the current position.
Span: Span = <sp:Sp<()>> => sp.span;

TokenSpan<Rule>: Sp<()> = <r:Sp<Rule>> => sp!(r.span => ());

Box<Rule>: Box<Rule> = <r:Rule> => Box::new(r);

/// Parse a separated sequence with an optional trailing separator.
SeparatedTrailing<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
    <SeparatedStrictNonempty<T, Sep>> Sep,
};

/// Parse a separated sequence with no trailing separator.
SeparatedStrict<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
};
SeparatedStrictNonempty<T, Sep>: Vec<T> = {
    <x:T> => vec![x],
    <mut xs:SeparatedStrictNonempty<T, Sep>> Sep <x:T> => {
        xs.push(x);
        xs
    },
};
