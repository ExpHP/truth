use crate::diagnostic::Diagnostic;
use crate::parse::lexer::{Token};
use crate::ident::{Ident, ResIdent};
use crate::pos::{Sp, Span};
use crate::ast::{self, meta, Meta};
use super::lalrparser_util as util;

grammar<'input, 'st>(state: &'st mut crate::parse::State);

extern {
    type Location = crate::parse::lexer::Location;
    type Error = Diagnostic;

    enum Token<'input> {
        // Terminals
        STRING => Token::LitString(<&'input str>),
        FLOAT => Token::LitFloat(<&'input str>),
        FLOAT_RAD => Token::LitRad(<&'input str>),
        INT => Token::LitInt(<&'input str>),
        DIFFICULTY => Token::DifficultyStr(<&'input str>),
        INSTR => Token::Instr(<&'input str>),
        IDENT => Token::Ident(<&'input str>),
        "," => Token::Comma,
        "?" => Token::Question,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "@" => Token::AtSign,
        "..." => Token::Ellipsis,
        "." => Token::Dot,
        "=" => Token::Eq,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "^" => Token::Caret,
        "|" => Token::Or,
        "&" => Token::And,
        "~" => Token::Tilde,
        "+=" => Token::PlusEq,
        "-=" => Token::MinusEq,
        "*=" => Token::StarEq,
        "/=" => Token::SlashEq,
        "%=" => Token::PercentEq,
        "^=" => Token::CaretEq,
        "|=" => Token::OrEq,
        "&=" => Token::AndEq,
        "==" => Token::EqEq,
        "!=" => Token::NotEq,
        "<" => Token::Less,
        "<=" => Token::LessEq,
        ">" => Token::Greater,
        ">=" => Token::GreaterEq,
        "<<" => Token::LessLess,
        ">>" => Token::GreaterGreater,
        ">>>" => Token::GreaterGreaterGreater,
        "<<=" => Token::LessLessEq,
        ">>=" => Token::GreaterGreaterEq,
        ">>>=" => Token::GreaterGreaterGreaterEq,
        "!" => Token::Not,
        "||" => Token::OrOr,
        "&&" => Token::AndAnd,
        "--" => Token::MinusMinus,
        "++" => Token::PlusPlus,
        "$" => Token::Cash,
        "#" => Token::Hash,
        "anim" => Token::Anim,
        "ecli" => Token::Ecli,
        "meta" => Token::Meta,
        "sub" => Token::Sub,
        "script" => Token::Script,
        "entry" => Token::Entry,
        "var" => Token::Var,
        "int" => Token::Int,
        "float" => Token::Float,
        "string" => Token::String,
        "void" => Token::Void,
        "const" => Token::Const,
        "inline" => Token::Inline,
        "insdef" => Token::Insdef,
        "return" => Token::Return,
        "goto" => Token::Goto,
        "loop" => Token::Loop,
        "if" => Token::If,
        "else" => Token::Else,
        "unless" => Token::Unless,
        "do" => Token::Do,
        "while" => Token::While,
        "times" => Token::Times,
        "break" => Token::Break,
        "switch" => Token::Switch,
        "case" => Token::Case,
        "default" => Token::Default,
        "interrupt" => Token::Interrupt,
        "async" => Token::Async,
        "global" => Token::Global,
        "pragma" => Token::Pragma,
        "mapfile" => Token::Mapfile,
        "image_source" => Token::ImageSource,
        "offsetof" => Token::OffsetOf,
        "timeof" => Token::TimeOf,
        "sin" => Token::Sin,
        "cos" => Token::Cos,
        "sqrt" => Token::Sqrt,
        "_S" => Token::LegacyEncodeI,
        "_f" => Token::LegacyEncodeF,
        "REG" => Token::Reg,
        // Virtual tokens for parsable nonterminals
        Dispatch_ScriptFile => Token::VirtualDispatch(crate::parse::AnythingTag::ScriptFile),
        Dispatch_Item => Token::VirtualDispatch(crate::parse::AnythingTag::Item),
        Dispatch_Block => Token::VirtualDispatch(crate::parse::AnythingTag::Block),
        Dispatch_Stmt => Token::VirtualDispatch(crate::parse::AnythingTag::Stmt),
        Dispatch_Expr => Token::VirtualDispatch(crate::parse::AnythingTag::Expr),
        Dispatch_Var => Token::VirtualDispatch(crate::parse::AnythingTag::Var),
        Dispatch_LitString => Token::VirtualDispatch(crate::parse::AnythingTag::LitString),
        Dispatch_Meta => Token::VirtualDispatch(crate::parse::AnythingTag::Meta),
        Dispatch_Ident => Token::VirtualDispatch(crate::parse::AnythingTag::Ident),
    }
}

// =================================================
// Parser dispatch

/// The parser's "designated driver."
///
/// Each nonterminal marked 'pub' in a lalrpop file generates an independent parser,
/// and the code sharing between them is inefficient. Thus, one can reduce compile
/// times a pretty fair deal by only having one public parser, which dispatches
/// to other nonterminals based on a virtual token inserted by the caller at
/// the beginning of the token stream.
///
/// Don't use this directly; use the [`crate::parse::Parse`] trait, which takes
/// care of all the silly virtual dispatch business.
pub(crate) Anything: Sp<crate::parse::AnythingValue> = Sp<AnythingInner>;

AnythingInner: crate::parse::AnythingValue = {
    Dispatch_Items <x:Items> => crate::parse::AnythingValue::Items(x),
    Dispatch_Item <x:Item> => crate::parse::AnythingValue::Item(x),
    Dispatch_Block <x:Block> => crate::parse::AnythingValue::Block(x),
    Dispatch_Stmt <x:Stmt> => crate::parse::AnythingValue::Stmt(x),
    Dispatch_Expr <x:Expr> => crate::parse::AnythingValue::Expr(x),
    Dispatch_Var <x:Var> => crate::parse::AnythingValue::Var(x),
    Dispatch_LitString <x:LitString> => crate::parse::AnythingValue::LitString(x),
    Dispatch_Meta <x:Meta> => crate::parse::AnythingValue::Meta(x),
    Dispatch_Ident <x:Ident> => crate::parse::AnythingValue::Ident(x),
};

// =================================================
// Items

Items: Vec<Sp<ast::Item>> = <Sp<Item>*>;

Item: ast::Item = {
    ItemPragma,
    ItemFunc,
    ItemScript,
    ItemMeta,
    ItemConstVar,
};

ItemPragma: ast::Item = {
    "#" <pragma_kw:TokenSpan<"pragma">> <kind:Sp<PragmaKindKeyword>> <arg:Sp<LitString>>
        => ast::Item::Pragma(ast::ItemPragma { pragma_kw, kind, arg }),
};

ItemScript: ast::Item = <item:_ItemScript> => ast::Item::Script(item);
_ItemScript: ast::ItemScript = {
    <keyword:TokenSpan<"script">> <number:Sp<LitIntSigned>?> <ident:Sp<Ident>>
        <code:Block>
        => ast::ItemScript { keyword, number, ident, code },
};

ItemMeta: ast::Item = <item:_ItemMeta> => ast::Item::Meta(item);
_ItemMeta: ast::ItemMeta = {
    <keyword:Sp<MetaKeyword>> <fields:Sp<MetaBracedFields>>
        => ast::ItemMeta { keyword, fields },
};

ItemConstVar: ast::Item = <item:_ItemConstVar> => ast::Item::ConstVar(item);
_ItemConstVar: ast::ItemConstVar = {
    "const" <ty_keyword:Sp<ConstVarTypeKeyword>> <vars:SeparatedStrict<Sp<ConstDeclarationListItem>, ",">> ";"
        => ast::ItemConstVar { ty_keyword, vars },
};

ItemFunc: ast::Item = <item:_ItemFunc> => ast::Item::Func(item);
_ItemFunc: ast::ItemFunc = {
    <func:ItemFuncHeader> ";" => func,

    <func:ItemFuncHeader> <code:Block> => ast::ItemFunc { code: Some(code), ..func },
};

ItemFuncHeader: ast::ItemFunc = {
    <qualifier:Sp<SingleFuncQualifier>?> <ty_keyword:Sp<FuncTypeKeyword>> <ident:Sp<ResIdent>>
        "(" <params:SeparatedTrailing<Sp<FuncParam>, ",">> ")"
        => ast::ItemFunc { qualifier, ty_keyword, ident, params, code: None },

    Sp<SingleFuncQualifier> <second:Sp<SingleFuncQualifier>> ! =>? Err(error!(
        message("too many function qualifiers"),
        primary(second, "extra qualifier"),
    ).into()),
};

PragmaKindKeyword: ast::PragmaKindKeyword = {
    "mapfile" => ast::PragmaKindKeyword::Mapfile,
    "image_source" => ast::PragmaKindKeyword::ImageSource,
};

#[inline]
SingleFuncQualifier: ast::FuncQualifier = {
    "const" => ast::FuncQualifier::Const,
    "inline" => ast::FuncQualifier::Inline,
};

FuncParam: ast::FuncParam = {
    <ty_keyword:Sp<LocalVarTypeKeyword>> <ident:Sp<ResIdent>?>
        => ast::FuncParam { ty_keyword, ident, qualifier: None },
};

MetaKeyword: ast::MetaKeyword = {
    "entry" => ast::MetaKeyword::Entry,
    "meta" => ast::MetaKeyword::Meta,
};

// ==================================================
// Metadata in a JSON-ish format, used by ANM

Meta: Meta = {
    <x:Sp<ExprNoColon>> => Meta::Scalar(x),
    <x:Sp<MetaBracedFields>> => Meta::Object(x),
    <name:Sp<Ident>> ":"? <fields:Sp<MetaBracedFields>> => Meta::Variant { name, fields },
    "[" <items:SeparatedTrailing<Sp<Meta>, ",">> "]" => Meta::Array(items),
};

MetaBracedFields: meta::Fields = {
    "{" <kvs:SeparatedTrailing<(<Sp<PossiblyNumericIdent>> ":" <Sp<Meta>>), ",">> "}" =>? {
        let mut map = indexmap::IndexMap::with_capacity(kvs.len());
        for (key, value) in kvs {
            let new_key_span = key.span;
            match map.entry(key) {
                indexmap::map::Entry::Vacant(entry) => { entry.insert(value); },
                indexmap::map::Entry::Occupied(entry) => return Err(error!(
                    message("duplicate metadata field '{}'", entry.key()),
                    primary(new_key_span, "duplicate key"),
                    secondary(entry.key().span, "previously supplied here"),
                ).into()),
            }
        }
        Ok(map)
    },
};

#[inline]
PossiblyNumericIdent: Ident = {
    <x:LitIntUnsigned> => Ident::new_system(&x.to_string()).expect("cannot fail"),
    <x:Ident> => x,
};

// ==================================================
// Statements

Stmt: ast::Stmt = {
    <diff_label:Sp<DiffLabel>> <kind:StmtKindPhysical>
        => ast::Stmt { kind, diff_label: Some(diff_label), node_id: None },

    <kind:StmtKind>
        => ast::Stmt { kind, diff_label: None, node_id: None },
};

#[inline]
DiffLabel: ast::DiffLabel = {
    // note: the Spans are just here to prevent a conflict with Block
    "{" Span <string:Sp<LitString>> Span "}" ":"
        => ast::DiffLabel { mask: None, string },
};

StmtKind: ast::StmtKind = {
    StmtKindPhysical,
    StmtKindUnphysical,
};

StmtKindUnphysical: ast::StmtKind = {
    <item:Box<Sp<ItemConstVar>>> => ast::StmtKind::Item(item),

    <item:Box<Sp<ItemFunc>>> => ast::StmtKind::Item(item),

    <name:Sp<Ident>> ":"
        => ast::StmtKind::Label(name),

    <delta:Sp<("+" <LitIntUnsigned>)>> ":"
        => ast::StmtKind::RelTimeLabel { delta, _absolute_time_comment: None },

    <t:Sp<LitIntSigned>> ":"
        => ast::StmtKind::AbsTimeLabel(t),
};

StmtKindPhysical: ast::StmtKind = {
    <keyword:TokenSpan<"return">> <value:Sp<Expr>?> ";"
        => ast::StmtKind::Return { keyword, value },

    <chain:CondChain>
        => ast::StmtKind::CondChain(chain),

    <keyword:Sp<CondKeyword>> "(" <cond:Sp<Expr>> ")" <jump:StmtJumpKind> ";"
        => ast::StmtKind::CondJump { keyword, cond, jump },

    <do_keyword:TokenSpan<"do">> <block:StmtOrBlock> <while_keyword:TokenSpan<"while">> "(" <cond:Sp<Expr>> ")" ";"
        => ast::StmtKind::While { do_keyword: Some(do_keyword), while_keyword, cond, block, loop_id: None },

    <while_keyword:TokenSpan<"while">> "(" <cond:Sp<Expr>> ")" <block:StmtOrBlock>
        => ast::StmtKind::While { do_keyword: None, while_keyword, cond, block, loop_id: None },

    <keyword:TokenSpan<"times">> "(" <clobber:(<Sp<Var>> "=")?> <count:Sp<Expr>> ")" <block:StmtOrBlock>
        => ast::StmtKind::Times { keyword, clobber, count, block, loop_id: None },

    <keyword:TokenSpan<"loop">> <block:StmtOrBlock>
        => ast::StmtKind::Loop { keyword, block, loop_id: None },

    <goto:StmtJumpKind> ";"
        => ast::StmtKind::Jump(goto),

    <e:Sp<ExprNoColon>> ";"
        => ast::StmtKind::Expr(e),

    "interrupt" "[" <arg:Sp<LitIntSigned>> "]" ":"
        => ast::StmtKind::InterruptLabel(arg),

    <block:Block> => ast::StmtKind::Block(block),

    <var:Sp<Var>> <op:Sp<OpAssign>> <value:Sp<Expr>> ";"
        => ast::StmtKind::Assignment { var, op, value },

    <ty_keyword:Sp<LocalVarTypeKeyword>> <vars:SeparatedStrict<Sp<StmtDeclarationListItem>, ",">> ";"
        => ast::StmtKind::Declaration { ty_keyword, vars },

    StmtSpecialCall,
};

StmtJumpKind: ast::StmtJumpKind = {
    "goto" <destination:Sp<Ident>> <time:("@" <Sp<LitIntSigned>>)?>
        => ast::StmtJumpKind::Goto(ast::StmtGoto { destination, time }),

    <keyword:Sp<BreakContinueKeyword>>
        => ast::StmtJumpKind::BreakContinue { keyword, loop_id: None },
};

BreakContinueKeyword: ast::BreakContinueKeyword = {
//    "continue" => token![continue],
    "break" => token![break],
};

StmtSpecialCall: ast::StmtKind = {
    // handle cases where at least one of the '@' or 'async' are present
    "@" <func:Sp<Ident>> <args:ExprCallParenArgs> <async_:CallAsyncKind?> ";" => {
        ast::StmtKind::CallSub { at_symbol: true, func, args, async_ }
    },
    <func:Sp<Ident>> <args:ExprCallParenArgs> <async_:CallAsyncKind> ";" => {
        ast::StmtKind::CallSub { at_symbol: true, func, args, async_: Some(async_) }
    },
};

CallAsyncKind: ast::CallAsyncKind = {
    "async" => ast::CallAsyncKind::CallAsync,
    "async" <id:Box<Sp<ExprNoColon>>> => ast::CallAsyncKind::CallAsyncId(id),
};

StmtDeclarationListItem: (Sp<ast::Var>, Option<Sp<ast::Expr>>) = {
    <var:Sp<VarIdent>> => (var, None),
    <var:Sp<VarIdent>> "=" <value:Sp<Expr>> => (var, Some(value)),
};

ConstDeclarationListItem: (Sp<ast::Var>, Sp<ast::Expr>) = {
    <tuple:StmtDeclarationListItem> =>? match tuple {
        (var, Some(expr)) => Ok((var, expr)),
        (var, None) => Err(error!(
            message("uninitialized const var"),
            primary(var, "needs a value"),
        ).into()),
    },
};

CondChain: ast::StmtCondChain = {
    <chain:CondChainWithoutElse> => chain,
    <mut chain:CondChainWithoutElse> "else" <else_block:StmtOrBlock> => {
        assert!(chain.else_block.is_none());
        chain.else_block = Some(else_block);
        chain
    },
};
CondChainWithoutElse: ast::StmtCondChain = {
    <cond_block:CondBlock> => {
        ast::StmtCondChain { cond_blocks: vec![cond_block], else_block: None }
    },
    <mut chain:CondChainWithoutElse> "else" <cond_block:CondBlock> => {
        chain.cond_blocks.push(cond_block);
        chain
    },
};

CondBlock: ast::CondBlock = {
    <keyword:Sp<CondKeyword>> "(" <cond:Sp<Expr>> ")" <block:StmtOrBlock>
        => ast::CondBlock { keyword, cond, block },
};

// block for an 'if', 'while', etc.
StmtOrBlock: ast::Block = {
    // FIXME: Todo: single statement.  (creates ambiguous grammar, how to fix?)
//    <st:Stmt> => vec![st],
    Block,
};

CondKeyword: ast::CondKeyword = {
    "if" => token![if],
    "unless" => token![unless],
};

Block: ast::Block = "{" <BlockInnards> "}";

#[inline]
BlockInnards: ast::Block = {
    <start_span:Span> <mut code:Sp<Stmt>*> <end_span:Span>
        => {
        // bookend with empty statements to simplify time and jump logic
        // NOTE: currently not necessary (?) now that time labels are stmts but we may soon want
        //       to replace these with matching BlockStart and BlockEnd(NodeId) stmts to allow
        //       block scoping of difficulty semantics, so I left them here.
        code.insert(0, sp!(start_span => ast::Stmt {
            node_id: None,
            diff_label: None,
            kind: ast::StmtKind::NoInstruction,
        }));
        code.push(sp!(end_span => ast::Stmt {
            node_id: None,
            diff_label: None,
            kind: ast::StmtKind::NoInstruction,
        }));
        ast::Block(code)
    },
};

// ==================================================
// Expressions

// Precedence is encoded in the use of these macros
LeftBinOp<Op, NextTier>: ast::Expr = {
    <a:Box<Sp<LeftBinOp<Op, NextTier>>>>
        <op:Sp<Op>>
        <b:Box<Sp<NextTier>>>
        => ast::Expr::BinOp(a, op, b),
    NextTier,
};
LeftUnOp<Op, NextTier>: ast::Expr = {
    // no recursion; only allow one unary op
    <op:Sp<Op>> <e:Box<Sp<NextTier>>> => ast::Expr::UnOp(op, e),
    NextTier,
};

Expr: ast::Expr = ExprWithColon;

// Operator precedence table.
// Ternary and difficulty switches have an ambiguity so neither contains the other.
ExprWithColon: ast::Expr = {
    ExprTernary,
    ExprDiffSwitch,
    ExprNoColon,
};
// Ternaries can be chained with right associativity
#[inline]
ExprTernaryRhs: ast::Expr = {
    ExprTernary,
    ExprNoColon,
};
ExprTernary: ast::Expr = {
    <cond:Box<Sp<ExprNoColon>>>
        <question:TokenSpan<"?">> <left:Box<Sp<ExprTernaryRhs>>>
        <colon:TokenSpan<":">> <right:Box<Sp<ExprTernaryRhs>>>
        => ast::Expr::Ternary { cond, left, right, question, colon },
};
#[inline]
ExprDiffSwitch: ast::Expr = {
    <first:Sp<ExprNoColon>> <mut rest:(":" <(<Sp<ExprNoColon>>)?>)+>
        => {
        rest.insert(0, Some(first));
        ast::Expr::DiffSwitch(rest)
    },
};

ExprNoColon = ExprBinOpOr;
ExprBinOpOr = LeftBinOp<OpOr, ExprBinOpAnd>;
ExprBinOpAnd = LeftBinOp<OpAnd, ExprBinOpBitOr>;
ExprBinOpBitOr = LeftBinOp<OpBitOr, ExprBinOpBitXor>;
ExprBinOpBitXor = LeftBinOp<OpBitXor, ExprBinOpBitAnd>;
ExprBinOpBitAnd = LeftBinOp<OpBitAnd, ExprBinOpCmpEq>;
ExprBinOpCmpEq = LeftBinOp<OpCmpEq, ExprBinOpCmpOrd>;
ExprBinOpCmpOrd = LeftBinOp<OpCmpOrd, ExprBinOpShift>;
ExprBinOpShift = LeftBinOp<OpShift, ExprBinOpAddLike>;
ExprBinOpAddLike = LeftBinOp<OpAddLike, ExprBinOpMulLike>;
ExprBinOpMulLike = LeftBinOp<OpMulLike, ExprUnOp>;
ExprUnOp = LeftUnOp<OpLeftUnary, ExprTerm>;

OpOr: ast::BinOpKind = "||" => token![||];
OpAnd: ast::BinOpKind = "&&" => token![&&];
OpBitOr: ast::BinOpKind = "|" => token![|];
OpBitXor: ast::BinOpKind = "^" => token![^];
OpBitAnd: ast::BinOpKind = "&" => token![&];
OpCmpEq: ast::BinOpKind = {
    "==" => token![==],
    "!=" => token![!=],
};
OpShift: ast::BinOpKind = {
    "<<" => token![<<],
    ">>" => token![>>],
    ">>>" => token![>>>],
};
OpCmpOrd: ast::BinOpKind = {
    ">" => token![>],
    "<" => token![<],
    ">=" => token![>=],
    "<=" => token![<=],
};
OpAddLike: ast::BinOpKind = {
    "+" => token![+],
    "-" => token![-],
};
OpMulLike: ast::BinOpKind = {
    "*" => token![*],
    "/" => token![/],
    "%" => token![%],
};
OpAssign: ast::AssignOpKind = {
    "=" => token![=],
    "+=" => token![+=],
    "-=" => token![-=],
    "*=" => token![*=],
    "/=" => token![/=],
    "%=" => token![%=],
    "|=" => token![|=],
    "^=" => token![^=],
    "&=" => token![&=],
    "<<=" => token![<<=],
    ">>=" => token![>>=],
    ">>>=" => token![>>>=],
};
OpXcrement: ast::XcrementOpKind = {
    "++" => token![++],
    "--" => token![--],
};
#[inline] OpLeftUnary: ast::UnOpKind = {
    "-" => token![-],
    "~" => token![~],
    "!" => token![!],
};

FuncUnOpKeyword: ast::UnOpKind = {
    "sin" => token![sin],
    "cos" => token![cos],
    "sqrt" => token![sqrt],
    // FIXME: differentiate read sigils from type casts
    "_S" => token![$],
    "_f" => token![%],
    "$" => token![$],
    "%" => token![%],
    "int" => token![int],
    "float" => token![float],
};

// Expressions that don't contain a toplevel operator
ExprTerm: ast::Expr = {
    "(" <e:Expr> ")" => e,

    <op:Sp<FuncUnOpKeyword>> "(" <e:Box<Sp<Expr>>> ")"
        => ast::Expr::UnOp(op, e),

    <keyword:Sp<LabelPropertyKeyword>> "(" <label:Sp<Ident>> ")"
        => ast::Expr::LabelProperty { label, keyword },

    <name:Sp<CallableName>> <args:ExprCallParenArgsWithPseudos>
        => ast::Expr::Call(ast::ExprCall { name, pseudos: args.0, args: args.1 }),

    <enum_name:Sp<Ident>> "." <ident:Sp<ResIdent>>
        => ast::Expr::EnumConst { enum_name, ident },

    <v:Sp<Var>> => ast::Expr::Var(v),

    <op:Sp<OpXcrement>> <var:Sp<Var>>
        => ast::Expr::XcrementOp { var, op, order: ast::XcrementOpOrder::Pre },

    <var:Sp<Var>> <op:Sp<OpXcrement>>
        => ast::Expr::XcrementOp { var, op, order: ast::XcrementOpOrder::Post },

    <value:LitIntUnsigned> => ast::Expr::LitInt { value, radix: ast::IntRadix::Dec },

    <value:LitFloatUnsigned> => ast::Expr::LitFloat { value },

    <x:LitString> => ast::Expr::LitString(x),

    // This syntax is reserved.
    // The only reason we parse it right now is just to prove that adding it wouldn't make the grammar ambiguous.
    <l: @L> <_v: Var> "[" <_e: Expr> "]" <r: @R> =>? Err(error!(
        message("invalid operation"),
        primary(Span::from_locs(l, r), "array indexing is not a thing, sorry"),
    ).into()),
};

LabelPropertyKeyword: ast::LabelPropertyKeyword = {
    "offsetof" => ast::LabelPropertyKeyword::OffsetOf,
    "timeof" => ast::LabelPropertyKeyword::TimeOf,
};

#[inline]
CallableName: ast::CallableName = {
    <ident:ResIdent> => ast::CallableName::Normal { ident, language_if_ins: None },
    <opcode:RawInsIdent> => ast::CallableName::Ins { opcode, language: None },
};

ExprCallParenArgs: Vec<Sp<ast::Expr>> = {
    <tup:ExprCallParenArgsWithPseudos> =>? {
        let (pseudos, args) = tup;
        match pseudos.len() {
            0 => Err(error!(
                message("unexpected pseudo-arg"),
                primary(pseudos[0].tag_span(), "only permitted in instruction calls"),
            ).into()),
            _ => Ok(args),
        }
    }
};

ExprCallParenArgsWithPseudos: (Vec<Sp<ast::PseudoArg>>, Vec<Sp<ast::Expr>>) = {
    "(" <mut things:SeparatedTrailing<Either<Sp<PseudoArg>, Sp<Expr>>, ",">> ")" =>? {
        let pseudo_end = things.iter().position(|x| matches!(x, util::Either::That(_))).unwrap_or_else(|| things.len());

        let args = things.drain(pseudo_end..).map(|x| match x {
            util::Either::That(arg) => Ok(arg),
            util::Either::This(pseudo) => Err(error!(
                message("invalid pseudo-arg"),
                primary(pseudo.tag_span(), "must come before other arguments"),
            )),
        }).collect::<Result<_, _>>()?;

        let pseudos = things.into_iter().map(|x| match x {
            util::Either::This(x) => x,
            util::Either::That(_) => unreachable!(),
        }).collect();

        Ok((pseudos, args))
    },
};

PseudoArg: ast::PseudoArg = {
    <at_sign:TokenSpan<"@">> <kind:Sp<PseudoArgKind>> <eq_sign:TokenSpan<"=">> <value:Sp<Expr>>
        => ast::PseudoArg { at_sign, kind, eq_sign, value }
};

PseudoArgKind: ast::PseudoArgKind = {
    <l: @L> <ident:Ident> <r: @R> =>? {
        const PAIRS: &'static [(&'static str, ast::PseudoArgKind)] = &[
            ("pop", token![pop]),
            ("mask", token![mask]),
            ("blob", token![blob]),
            ("arg0", token![arg0]),
        ];

        PAIRS.iter()
            .filter(|&&(str, _)| ident == *str)
            .map(|&(_, token)| token)
            .next().ok_or_else(|| {
                let expected = PAIRS.iter().map(|x| x.0).collect::<Vec<_>>().join(", ");
                error!(
                    message("invalid pseudo-arg"),
                    primary(Span::from_locs(l, r), "not a pseudo-arg"),
                    note("valid pseudo-args are: {}", expected),
                ).into()
            })
    },
};

// ==================================================

LitString: ast::LitString = {
    <l: @L> <s:STRING> <r: @R> =>? {
        let string = util::parse_string_literal(s, (l, r))?;
        Ok(ast::LitString { string })
    },
};

LitFloatSigned: f32 = {
    "-" <x:LitFloatUnsigned> => -x,
    <x:LitFloatUnsigned> => x,
};

LitIntSigned: i32 = {
    "-" <x:LitIntUnsigned> => i32::wrapping_neg(x),
    <x:LitIntUnsigned> => x,
};

LitFloatUnsigned: f32 = {
    <mut s:FLOAT> => {
        if s.ends_with("f") || s.ends_with("F") {
            s = &s[..s.len()-1];
        }
        s.parse().unwrap()
    },
    <mut s:FLOAT_RAD> => {
        s = &s["rad(".len()..];
        s = &s[..s.len()-")".len()];
        if s.ends_with("f") || s.ends_with("F") {
            s = &s[..s.len()-1];
        }
        s.parse::<f32>().unwrap().to_radians()
    },
};

LitIntUnsigned: i32 = {
    <l: @L> <text:INT> <r: @R> =>? {
        util::parse_u32_literal(text, (l, r))
            // Note: Parsing numbers in the range 2^31..2^32 without overflow errors is deliberately supported
            .map(|x: u32| x as i32)
            .map_err(Into::into)
    },
};

// ==================================================
// Variables

Var: ast::Var = {
    <ty_sigil:VarSigil> <name:VarName> => ast::Var { ty_sigil, name },
};

#[inline]
VarSigil: Option<ast::VarSigil> = {
    => None,
    "$" => Some(token![sigil $]),
    "%" => Some(token![sigil %]),
};

VarName: ast::VarName = {
    <ident:ResIdent>
        => ast::VarName::from_parsed_ident(ident),

    "REG" "[" <sign:OptionalMinus> <x:LitIntUnsigned> "]"
        => ast::VarName::Reg { reg: i32::wrapping_mul(x, sign).into(), language: None },
};

VarIdent: ast::Var = <ident:ResIdent>
    => ast::Var { ty_sigil: None, name: ast::VarName::from_parsed_ident(ident) };

OptionalMinus: i32 = {
    "-" => -1,
    => 1,
};

#[inline]
ResIdent: ResIdent = <ident:Ident> => ResIdent::new_null(ident);

Ident: Ident = <tok:IdentStr> => {
    Ident::new_system(tok).expect("cannot fail; known ASCII")
};

IdentStr: &'input str = {
    // obviously
    IDENT,
    // contextual keywords
    <s: "mapfile"> => s.as_str(),
    <s: "entry"> => s.as_str(),
    <s: "anim"> => s.as_str(),
    <s: "ecli"> => s.as_str(),
    <s: "script"> => s.as_str(),
    <s: "default"> => s.as_str(),
    <s: "case"> => s.as_str(),
};

RawInsIdent: u16 = {
    <l:@L> <ins_ident:INSTR> <r:@R> =>? {
        use regex::Regex;

        lazy_static::lazy_static!{
            static ref CANONICAL_INT_RE: Regex = Regex::new("^(0|[1-9][0-9]*)$").unwrap();
        }

        assert!(ins_ident.starts_with("ins_"));
        let num_str = &ins_ident["ins_".len()..];
        if !CANONICAL_INT_RE.is_match(num_str) {
            return Err(error!(
                message("invalid instruction identifier"),
                primary(Span::from_locs(l, r), "invalid instruction identifier"),
                note(r#"identifiers beginning with 'ins_' must end in a canonically-formatted integer, e.g. 'ins_42'."#),
            ).into());
        }

        num_str.parse()
            // this error is mostly for overflow
            .map_err(|e| error!(
                message("invalid instruction identifier"),
                primary(Span::from_locs(l, r), "{}", e),
            ).into())
    }
};

// ==================================================
// Type

#[inline]
FuncTypeKeyword: ast::TypeKeyword = {
    <keyword:Sp<TypeKeyword>> =>? match keyword.value {
        token![var] => Err(error!(
            message("var-typed function"),
            primary(keyword, "cannot be used on functions"),
        ).into()),
        kw => Ok(kw),
    }
};

#[inline]
ConstVarTypeKeyword: ast::TypeKeyword = {
    <keyword:Sp<VarTypeKeyword>> =>? match keyword.value {
        token![var] => return Err(error!(
            message("illegal untyped const"),
            primary(keyword, "const vars must have a type"),
        ).into()),
        kw => Ok(kw),
    },
};

#[inline]
LocalVarTypeKeyword: ast::TypeKeyword = {
    <keyword:Sp<VarTypeKeyword>> =>? match keyword.value {
        token![string] => Err(error!(
            message("non-const string variable"),
            primary(keyword, "only possible for const vars"),
        ).into()),
        kw => Ok(kw),
    },
};

#[inline]
VarTypeKeyword: ast::TypeKeyword = {
    <keyword:Sp<TypeKeyword>> =>? match keyword.value {
        token![void] => Err(error!(
            message("void-typed variable"),
            primary(keyword, "variables must have a value"),
        ).into()),
        kw => Ok(kw),
    },
};

TypeKeyword: ast::TypeKeyword = {
    "int" => token![int],
    "float" => token![float],
    "string" => token![string],
    "var" => token![var],
    "void" => token![void],
};

// ==================================================
// Utility

/// Parse something while obtaining its span.
#[inline]
Sp<Rule>: Sp<Rule> = {
    <l: @L> <rule: Rule> <r: @R> => Sp {
        span: Span::from_locs(l, r),
        value: rule,
    },
}
/// Get a zero-length span at the current position.
Span: Span = <sp:Sp<()>> => sp.span;

TokenSpan<Rule>: Sp<()> = <r:Sp<Rule>> => sp!(r.span => ());

Box<Rule>: Box<Rule> = <r:Rule> => Box::new(r);

Either<A, B>: util::Either<A, B> = {
    <a: A> => util::Either::This(a),
    <b: B> => util::Either::That(b),
};

/// Parse a separated sequence with an optional trailing separator.
SeparatedTrailing<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
    <SeparatedStrictNonempty<T, Sep>> Sep,
};

/// Parse a separated sequence with no trailing separator.
SeparatedStrict<T, Sep>: Vec<T> = {
    => vec![],
    <SeparatedStrictNonempty<T, Sep>>,
};
#[inline]
SeparatedStrictNonempty<T, Sep>: Vec<T> = {
    <xs:(<T> Sep)*> <last:T> => util::push(xs, last),
};
