use super::CoreSignatures;
use crate::Game::{self, *};
use crate::llir::IntrinsicInstrKind as IKind;
use crate::ast::AssignOpKind as A;
use crate::ast::BinOpKind as B;
use crate::ast::UnOpKind as U;
use crate::value::ScalarType as Ty;

pub(super) fn core_signatures(game: Game) -> &'static CoreSignatures {
    match game {
        Th06 => ECL_06,
        Th07 => ECL_07,
        Th08 | Th09 => ECL_08_09,
        Th095 => ECL_095,
        Th10 => ECL_10,

        Alcostg | Th11 | Th12 | Th125 | Th128 |
        Th13 | Th14 | Th143 | Th15 | Th16 | Th165 | Th17 | Th18 => CoreSignatures::EMPTY,
    }
}

pub(super) fn timeline_core_signatures(game: Game) -> &'static CoreSignatures {
    match game {
        Th06 | Th07 | Th08 | Th09 | Th095 => TIMELINE,

        Th10 | Alcostg | Th11 | Th12 | Th125 | Th128 |
        Th13 | Th14 | Th143 | Th15 | Th16 | Th165 | Th17 | Th18 => CoreSignatures::EMPTY,
    }
}

static TIMELINE: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th06, 0, Some((r#"s(arg0;enum="EclSub")fffssS"#, None))),
        (Th06, 1, Some((r#"s(arg0;enum="EclSub")fff"#, None))),
        (Th06, 2, Some((r#"s(arg0;enum="EclSub")fffssS"#, None))),
        (Th06, 3, Some((r#"s(arg0;enum="EclSub")fff"#, None))),
        (Th06, 4, Some((r#"s(arg0;enum="EclSub")fffssS"#, None))),
        (Th06, 5, Some((r#"s(arg0;enum="EclSub")fff"#, None))),
        (Th06, 6, Some((r#"s(arg0;enum="EclSub")fffssS"#, None))),
        (Th06, 7, Some((r#"s(arg0;enum="EclSub")fff"#, None))),
        (Th06, 8, Some((r#"s(arg0;enum="MsgScript")"#, None))),
        (Th06, 9, Some(("", None))),
        (Th06, 10, Some(("SS", None))),
        (Th06, 11, Some(("u(arg0)", None))),
        (Th06, 12, Some(("s(arg0)", None))),

        (Th07, 0, Some((r#"s(arg0;enum="EclSub")fffSSS"#, None))),
        (Th07, 2, Some((r#"s(arg0;enum="EclSub")fffSSS"#, None))),
        (Th07, 4, Some((r#"s(arg0;enum="EclSub")fffSSS"#, None))),
        (Th07, 6, Some((r#"s(arg0;enum="EclSub")fffSSS"#, None))),
        (Th07, 11, Some(("s(arg0)", None))),

        (Th08, 0, Some(("EffSSS", None))),
        (Th08, 1, Some(("EffSSS", None))),
        (Th08, 2, Some(("EfffSSS", None))),
        (Th08, 3, Some(("EfSSS", None))),
        (Th08, 4, Some(("EfffSSS", None))),
        (Th08, 5, Some(("EfSSS", None))),
        (Th08, 6, Some((r#"S(enum="MsgScript")"#, None))),
        (Th08, 7, Some(("", None))), // Not implemented in PoFV, but present in the files anyway
        (Th08, 8, Some(("Ss--", None))),
        (Th08, 9, Some(("S", None))),
        (Th08, 10, Some(("S", None))),
        (Th08, 11, Some(("EffSSSS", None))),
        (Th08, 12, Some(("EffSSSS", None))),
        (Th08, 13, Some(("S", None))), // zero: S(enum="SclScript")
        (Th08, 14, Some(("S", None))), // zero: S(enum="SclScript")
        (Th08, 15, Some(("EffSSS", None))),
        (Th08, 16, Some(("", None))),

        (Th09, 6, None),
        (Th09, 9, None),
        (Th09, 17, Some(("EffSSS", None))),

        (Th095, 7, None),
        (Th095, 13, None),
        (Th095, 14, None),
        (Th095, 16, None),
        (Th095, 17, None),
    ],
    var: &[],
};

static ECL_06: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th06, 0, Some(("", None))),
        (Th06, 1, Some(("_", None))), // Bytes are never read
        (Th06, 2, Some(("to", Some(IKind::Jmp)))),
        (Th06, 3, Some(("toS", Some(IKind::CountJmp(B::Gt))))),
        (Th06, 4, Some(("SS", Some(IKind::AssignOp(A::Assign, Ty::Int))))),
        (Th06, 5, Some(("Sf", Some(IKind::AssignOp(A::Assign, Ty::Float))))),
        (Th06, 6, Some(("SU", None))), // The division for both of these uses DIV instead of IDIV
        (Th06, 7, Some(("SUS", None))),
        (Th06, 8, Some(("Sf", None))),
        (Th06, 9, Some(("Sff", None))),
        (Th06, 10, Some(("S", None))),
        (Th06, 11, Some(("S", None))),
        (Th06, 12, Some(("S", None))),
        (Th06, 13, Some(("SSS", Some(IKind::BinOp(B::Add, Ty::Int))))),
        (Th06, 14, Some(("SSS", Some(IKind::BinOp(B::Sub, Ty::Int))))),
        (Th06, 15, Some(("SSS", Some(IKind::BinOp(B::Mul, Ty::Int))))), // EoSD reads args 2/3 an extra time for multiplication compared to the other ops, so don't prefer multiplication based fallback sequences
        (Th06, 16, Some(("SSS", Some(IKind::BinOp(B::Div, Ty::Int))))),
        (Th06, 17, Some(("SSS", Some(IKind::BinOp(B::Rem, Ty::Int))))),
        (Th06, 18, Some(("S", None))), // Some(IKind::UnOp(U::Inc, Ty::Int))
        (Th06, 19, Some(("S", None))), // Some(IKind::UnOp(U::Dec, Ty::Int))
        (Th06, 20, Some(("Sff", Some(IKind::BinOp(B::Add, Ty::Float))))),
        (Th06, 21, Some(("Sff", Some(IKind::BinOp(B::Sub, Ty::Float))))),
        (Th06, 22, Some(("Sff", Some(IKind::BinOp(B::Mul, Ty::Float))))),
        (Th06, 23, Some(("Sff", Some(IKind::BinOp(B::Div, Ty::Float))))),
        (Th06, 24, Some(("Sff", Some(IKind::BinOp(B::Rem, Ty::Float))))),
        (Th06, 25, Some(("Sffff", None))),
        (Th06, 26, Some(("S", None))),
        (Th06, 27, Some(("SS", Some(IKind::CondJmp2A(Ty::Int))))),
        (Th06, 28, Some(("ff", Some(IKind::CondJmp2A(Ty::Float))))),
        (Th06, 29, Some(("to", Some(IKind::CondJmp2B(B::Lt))))),
        (Th06, 30, Some(("to", Some(IKind::CondJmp2B(B::Le))))),
        (Th06, 31, Some(("to", Some(IKind::CondJmp2B(B::Eq))))),
        (Th06, 32, Some(("to", Some(IKind::CondJmp2B(B::Gt))))),
        (Th06, 33, Some(("to", Some(IKind::CondJmp2B(B::Ge))))),
        (Th06, 34, Some(("to", Some(IKind::CondJmp2B(B::Ne))))),
        (Th06, 35, Some(("E(imm)S(imm)f(imm)", Some(IKind::CallEosd)))),
        (Th06, 36, Some(("", None))), // Some(IKind::Return)
        (Th06, 37, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Lt))
        (Th06, 38, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Le))
        (Th06, 39, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Eq))
        (Th06, 40, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Gt))
        (Th06, 41, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Ge))
        (Th06, 42, Some(("E(imm)S(imm)f(imm)SS(imm)", None))), // Some(IKind::CallEosdCond(B::Ne))
        (Th06, 43, Some(("fff", None))),
        (Th06, 44, Some(("fff", None))),
        (Th06, 45, Some(("ff", None))),
        (Th06, 46, Some(("f", None))),
        (Th06, 47, Some(("f", None))),
        (Th06, 48, Some(("f", None))),
        (Th06, 49, Some(("f(imm)f(imm)", None))),
        (Th06, 50, Some(("f(imm)f(imm)", None))),
        (Th06, 51, Some(("f(imm)f", None))),
        (Th06, 52, Some(("S(imm)ff(imm)", None))),
        (Th06, 53, Some(("S(imm)ff(imm)", None))),
        (Th06, 54, Some(("S(imm)ff(imm)", None))),
        (Th06, 55, Some(("S(imm)ff(imm)", None))),
        (Th06, 56, Some(("S(imm)fff", None))),
        (Th06, 57, Some(("S(imm)fff", None))),
        (Th06, 58, Some(("S(imm)fff", None))),
        (Th06, 59, Some(("S(imm)fff", None))),
        (Th06, 60, Some(("S(imm)fff", None))),
        (Th06, 61, Some(("S(imm)", None))), //
        (Th06, 62, Some(("S(imm)", None))), // These read the current value of SELF_ANGLE as a variable
        (Th06, 63, Some(("S(imm)", None))), //
        (Th06, 64, Some(("S(imm)", None))), //
        (Th06, 65, Some(("f(imm)f(imm)f(imm)f(imm)", None))),
        (Th06, 66, Some(("", None))),
        // Flags marked as hex
        (Th06, 67, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 68, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 69, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 70, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 71, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 72, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 73, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 74, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 75, Some(("s(imm)sSSffffU(imm;hex)", None))),
        (Th06, 76, Some(("S(imm)", None))),
        (Th06, 77, Some(("S(imm)", None))), // This value is used with both IDIV and DIV...?
        (Th06, 78, Some(("", None))),
        (Th06, 79, Some(("", None))),
        (Th06, 80, Some(("", None))),
        (Th06, 81, Some(("fff", None))),
        (Th06, 82, Some(("SSSSffff", None))),
        (Th06, 83, Some(("", None))),
        (Th06, 84, Some(("S(imm)", None))),
        (Th06, 85, Some(("s(imm)s(imm)ffffff(imm)S(imm)S(imm)S(imm)S(imm)S(imm)U(imm;hex)", None))),
        (Th06, 86, Some(("s(imm)s(imm)ffffff(imm)S(imm)S(imm)S(imm)S(imm)S(imm)U(imm;hex)", None))),
        (Th06, 87, Some(("S", None))),
        (Th06, 88, Some(("S(imm)f", None))),
        (Th06, 89, Some(("S(imm)f", None))),
        (Th06, 90, Some(("S(imm)f(imm)f(imm)f(imm)", None))),
        (Th06, 91, Some(("S(imm)", None))),
        (Th06, 92, Some(("S(imm)", None))),
        // 34. Yes. This makes every spell name instruction not a multiple of 4 bytes.
        (Th06, 93, Some(("s(imm)s(imm)z(len=34)", None))),
        (Th06, 94, Some(("", None))),
        (Th06, 95, Some(("E(imm)fffs(imm)s(imm)S(imm)", None))),
        (Th06, 96, Some(("", None))),
        (Th06, 97, Some(("N(imm)", None))),
        (Th06, 98, Some((r#"s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")--"#, None))),
        (Th06, 99, Some(("S(imm)N(imm)", None))),
        (Th06, 100, Some(("b(imm)b(imm)b(imm)-", None))),
        (Th06, 101, Some(("S(imm)", None))),
        (Th06, 102, Some(("S(imm)f(imm)f(imm)f(imm)f(imm)", None))),
        (Th06, 103, Some(("f(imm)f(imm)f(imm)", None))),
        (Th06, 104, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 105, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 106, Some(("S(imm)", None))),
        (Th06, 107, Some(("b(imm)---", None))),
        (Th06, 108, Some(("E(imm)", None))),
        (Th06, 109, Some(("E(imm)S(imm)", None))),
        (Th06, 110, Some(("S(imm)", None))),
        (Th06, 111, Some(("S(imm)", None))),
        (Th06, 112, Some(("S(imm)", None))),
        (Th06, 113, Some(("S(imm)", None))),
        (Th06, 114, Some(("E(imm)", None))),
        (Th06, 115, Some(("S(imm)", None))),
        (Th06, 116, Some(("E(imm)", None))),
        (Th06, 117, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 118, Some(("S(imm)U(imm)C(imm)", None))),
        (Th06, 119, Some(("S(imm)", None))),
        (Th06, 120, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 121, Some(("S(imm)S(imm)", None))), // zero: S(imm)v
        (Th06, 122, Some(("S(imm)", None))),
        (Th06, 123, Some(("S", None))), // Lack of (imm) here is not a typo
        (Th06, 124, Some(("S(imm)", None))),
        (Th06, 125, Some(("", None))),
        (Th06, 126, Some(("S(imm)", None))),
        (Th06, 127, Some(("S", None))),
        (Th06, 128, Some(("s(imm)--", None))),
        (Th06, 129, Some(("S(imm)s(imm)--", None))),
        (Th06, 130, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 131, Some(("f(imm)f(imm)S(imm)S(imm)S(imm)S(imm)", None))),
        (Th06, 132, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th06, 133, Some(("", None))),
        (Th06, 134, Some(("", None))),
        (Th06, 135, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
    ],
    var: &[
        (Th06, -10001, Some("$")),
        (Th06, -10002, Some("$")),
        (Th06, -10003, Some("$")),
        (Th06, -10004, Some("$")),
        (Th06, -10005, Some("%")),
        (Th06, -10006, Some("%")),
        (Th06, -10007, Some("%")),
        (Th06, -10008, Some("%")),
        (Th06, -10009, Some("$")),
        (Th06, -10010, Some("$")),
        (Th06, -10011, Some("$")),
        (Th06, -10012, Some("$")),
        (Th06, -10013, Some("$")),
        (Th06, -10014, Some("$")),
        (Th06, -10015, Some("%")),
        (Th06, -10016, Some("%")),
        (Th06, -10017, Some("%")),
        (Th06, -10018, Some("%")),
        (Th06, -10019, Some("%")),
        (Th06, -10020, Some("%")),
        (Th06, -10021, Some("%")),
        (Th06, -10022, Some("$")),
        (Th06, -10023, Some("%")),
        (Th06, -10024, Some("$")),
        (Th06, -10025, Some("$")),
    ],
};

static ECL_07: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th07, 0, Some(("", None))),
        (Th07, 1, Some(("", None))),
        (Th07, 2, Some(("to", Some(IKind::Jmp)))),
        (Th07, 3, Some(("toS", Some(IKind::CountJmp(B::Gt))))),
        (Th07, 4, Some(("SS", Some(IKind::AssignOp(A::Assign, Ty::Int))))),
        (Th07, 5, Some(("ff", Some(IKind::AssignOp(A::Assign, Ty::Float))))),
        (Th07, 6, Some(("SU", None))),
        (Th07, 7, Some(("SUS", None))),
        (Th07, 8, Some(("ff", None))),
        (Th07, 9, Some(("fff", None))),
        (Th07, 10, Some(("SS", None))),
        (Th07, 11, Some(("ff", None))),
        (Th07, 12, Some(("SSS", Some(IKind::BinOp(B::Add, Ty::Int))))),
        (Th07, 13, Some(("SSS", Some(IKind::BinOp(B::Sub, Ty::Int))))),
        (Th07, 14, Some(("SSS", Some(IKind::BinOp(B::Mul, Ty::Int))))),
        (Th07, 15, Some(("SSS", Some(IKind::BinOp(B::Div, Ty::Int))))),
        (Th07, 16, Some(("SSS", Some(IKind::BinOp(B::Rem, Ty::Int))))),
        (Th07, 17, Some(("S", None))), // Some(IKind::UnOp(U::Inc, Ty::Int))
        (Th07, 18, Some(("S", None))), // Some(IKind::UnOp(U::Dec, Ty::Int))
        (Th07, 19, Some(("fff", Some(IKind::BinOp(B::Add, Ty::Float))))),
        (Th07, 20, Some(("fff", Some(IKind::BinOp(B::Sub, Ty::Float))))),
        (Th07, 21, Some(("fff", Some(IKind::BinOp(B::Mul, Ty::Float))))),
        (Th07, 22, Some(("fff", Some(IKind::BinOp(B::Div, Ty::Float))))),
        (Th07, 23, Some(("fff", Some(IKind::BinOp(B::Rem, Ty::Float))))),
        (Th07, 24, Some(("ff", Some(IKind::UnOp(U::Sin, Ty::Float))))),
        (Th07, 25, Some(("ff", Some(IKind::UnOp(U::Cos, Ty::Float))))),
        (Th07, 26, Some(("fffff", None))),
        (Th07, 27, Some(("fSSSffff", None))),
        (Th07, 28, Some(("SSto", Some(IKind::CondJmp(B::Eq, Ty::Int))))),
        (Th07, 29, Some(("ffto", Some(IKind::CondJmp(B::Eq, Ty::Float))))),
        (Th07, 30, Some(("SSto", Some(IKind::CondJmp(B::Ne, Ty::Int))))),
        (Th07, 31, Some(("ffto", Some(IKind::CondJmp(B::Ne, Ty::Float))))),
        (Th07, 32, Some(("SSto", Some(IKind::CondJmp(B::Lt, Ty::Int))))),
        (Th07, 33, Some(("ffto", Some(IKind::CondJmp(B::Lt, Ty::Float))))),
        (Th07, 34, Some(("SSto", Some(IKind::CondJmp(B::Le, Ty::Int))))),
        (Th07, 35, Some(("ffto", Some(IKind::CondJmp(B::Le, Ty::Float))))),
        (Th07, 36, Some(("SSto", Some(IKind::CondJmp(B::Gt, Ty::Int))))),
        (Th07, 37, Some(("ffto", Some(IKind::CondJmp(B::Gt, Ty::Float))))),
        (Th07, 38, Some(("SSto", Some(IKind::CondJmp(B::Ge, Ty::Int))))),
        (Th07, 39, Some(("ffto", Some(IKind::CondJmp(B::Ge, Ty::Float))))),
        (Th07, 40, Some(("f", None))),
        (Th07, 41, Some(("E(imm)", Some(IKind::CallReg)))),
        (Th07, 42, Some(("", None))), // Some(IKind::Return)
        (Th07, 43, Some(("SSS", None))),
        (Th07, 44, Some(("ffS", None))),
        (Th07, 45, Some(("S", None))),
        (Th07, 46, Some(("fff", None))),
        (Th07, 47, Some(("fff", None))),
        (Th07, 48, Some(("f", None))),
        (Th07, 49, Some(("f", None))),
        (Th07, 50, Some(("f", None))),
        (Th07, 51, Some(("fff", None))),
        (Th07, 52, Some(("fff", None))), // Arguments 2 and 3 are never read
        (Th07, 53, Some(("ff", None))),
        (Th07, 54, Some(("SSff", None))),
        (Th07, 55, Some(("SSfff", None))),
        (Th07, 56, Some(("Sfffffff", None))),
        (Th07, 57, Some(("ff", None))),
        (Th07, 58, Some(("ff", None))),
        (Th07, 59, Some(("S", None))),
        (Th07, 60, Some(("S", None))),
        (Th07, 61, Some(("S", None))),
        (Th07, 62, Some(("ffff", None))),
        (Th07, 63, Some(("", None))),
        (Th07, 64, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 65, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 66, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 67, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 68, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 69, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 70, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 71, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 72, Some(("ssSSffffU(imm;hex)", None))),
        (Th07, 73, Some(("S", None))),
        (Th07, 74, Some(("S", None))),
        (Th07, 75, Some(("", None))),
        (Th07, 76, Some(("", None))),
        (Th07, 77, Some(("", None))),
        (Th07, 78, Some(("fff", None))),
        (Th07, 79, Some((r#"SU(hex)U(enum="bool")SSff"#, None))),
        (Th07, 80, Some(("", None))),
        (Th07, 81, Some(("SS", None))),
        (Th07, 82, Some(("s(imm)sffffff(imm)S(imm)S(imm)S(imm)S(imm)S(imm)U(imm;hex)", None))),
        (Th07, 83, Some(("s(imm)sffffff(imm)S(imm)S(imm)S(imm)S(imm)S(imm)U(imm;hex)", None))),
        (Th07, 84, Some(("S", None))),
        (Th07, 85, Some(("Sf", None))),
        (Th07, 86, Some(("Sf", None))),
        (Th07, 87, Some(("Sfff", None))),
        (Th07, 88, Some(("S", None))),
        (Th07, 89, Some(("S", None))),
        (Th07, 90, Some(("s(imm)u(imm)m(len=48;mask=0xaa,0,0)", None))),
        (Th07, 91, Some(("", None))),
        (Th07, 92, Some(("E(imm)fffSSS", None))),
        (Th07, 93, Some(("E(imm)fffSSS", None))),
        (Th07, 94, Some(("", None))),
        (Th07, 95, Some(("N", None))),
        (Th07, 96, Some((r#"s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")s(imm;enum="AnmScript")--"#, None))),
        (Th07, 97, Some(("SN", None))),
        (Th07, 98, Some(("c(imm)b(imm)b(imm)-", None))),
        (Th07, 99, Some(("S", None))),
        (Th07, 100, Some(("S(imm)f(imm)f(imm)f(imm)f(imm)", None))),
        (Th07, 101, Some(("fff", None))),
        (Th07, 102, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 103, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 104, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 105, Some(("S", None))),
        (Th07, 106, Some(("b(imm)---", None))),
        (Th07, 107, Some((r#"b(imm;enum="EclSub")---"#, None))),
        (Th07, 108, Some(("ES", None))), // Yes, this really is a non-immediate sub id. Any fields marked as such are intentional!
        (Th07, 109, Some(("S", None))),
        (Th07, 110, Some(("S", None))),
        (Th07, 111, Some(("S", None))),
        (Th07, 112, Some(("S", None))),
        (Th07, 113, Some(("E", None))),
        (Th07, 114, Some(("S", None))),
        (Th07, 115, Some(("E", None))),
        (Th07, 116, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 117, Some(("SUC", None))), // Third argument is read from a pointer for some reason...
        (Th07, 118, Some(("SUCfff", None))), // Also read as a pointer
        (Th07, 119, Some(("S", None))),
        (Th07, 120, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 121, Some(("SS(imm)", None))), // zero: Sv
        (Th07, 122, Some(("SS(imm)", None))), // zero: Sv
        (Th07, 123, Some(("S", None))),
        (Th07, 124, Some(("S", None))),
        (Th07, 125, Some(("S", None))),
        (Th07, 126, Some(("S", None))),
        (Th07, 127, Some(("S", None))),
        (Th07, 128, Some(("S", None))),
        (Th07, 129, Some(("S(imm)s(imm)--", None))),
        (Th07, 130, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 131, Some(("ffSSSS", None))),
        (Th07, 132, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 133, Some(("", None))),
        (Th07, 134, Some(("", None))),
        (Th07, 135, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 136, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 137, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th07, 138, Some(("b(imm;hex)---SSS", None))),
        (Th07, 139, Some(("SSSC", None))),
        (Th07, 140, Some(("ffff", None))),
        (Th07, 141, Some(("S", None))), // Not implemented
        (Th07, 142, Some(("S", None))),
        (Th07, 143, Some(("f", None))),
        (Th07, 144, Some(("SE", None))),
        (Th07, 145, Some(("SS", None))),
        (Th07, 146, Some(("", None))),
        (Th07, 147, Some(("S", None))),
        (Th07, 148, Some(("SSE", None))),
        (Th07, 149, Some((r#"U(enum="bool")fff"#, None))), // zero: U(enum="BitBool")fff
        (Th07, 150, Some(("f", None))),
        (Th07, 151, Some(("ffff", None))),
        (Th07, 152, Some(("Sf", None))),
        (Th07, 153, Some(("fff", None))),
        (Th07, 154, Some(("S", None))),
        (Th07, 155, Some(("f", None))),
        (Th07, 156, Some((r#"SU(enum="bool")"#, None))),
        (Th07, 157, Some(("Sf", None))),
        (Th07, 158, Some(("Sff", None))),
        (Th07, 159, Some(("ffff", None))),
        (Th07, 160, Some(("S", None))),
        (Th07, 161, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
    ],
    var: &[
        (Th07, 10000, Some("$")),
        (Th07, 10001, Some("$")),
        (Th07, 10002, Some("$")),
        (Th07, 10003, Some("$")),
        (Th07, 10004, Some("%")),
        (Th07, 10005, Some("%")),
        (Th07, 10006, Some("%")),
        (Th07, 10007, Some("%")),
        (Th07, 10008, Some("%")),
        (Th07, 10009, Some("%")),
        (Th07, 10010, Some("%")),
        (Th07, 10011, Some("%")),
        (Th07, 10012, Some("$")),
        (Th07, 10013, Some("$")),
        (Th07, 10014, Some("$")),
        (Th07, 10015, Some("$")),
        (Th07, 10016, Some("$")),
        (Th07, 10017, Some("$")),
        (Th07, 10018, Some("%")),
        (Th07, 10019, Some("%")),
        (Th07, 10020, Some("%")),
        (Th07, 10021, Some("%")),
        (Th07, 10022, Some("%")),
        (Th07, 10023, Some("%")),
        (Th07, 10024, Some("%")),
        (Th07, 10025, Some("$")),
        (Th07, 10026, Some("%")),
        (Th07, 10027, Some("$")),
        (Th07, 10028, Some("$")),
        (Th07, 10029, Some("$")),
        (Th07, 10030, Some("$")),
        (Th07, 10031, Some("$")),
        (Th07, 10032, Some("$")),
        (Th07, 10033, Some("%")),
        (Th07, 10034, Some("%")),
        (Th07, 10035, Some("%")),
        (Th07, 10036, Some("%")),
        (Th07, 10037, Some("$")),
        (Th07, 10038, Some("$")),
        (Th07, 10039, Some("$")),
        (Th07, 10040, Some("$")),
        (Th07, 10041, Some("%")),
        (Th07, 10042, Some("%")),
        (Th07, 10043, Some("%")),
        (Th07, 10044, Some("%")),
        (Th07, 10045, Some("%")),
        (Th07, 10046, Some("%")),
        (Th07, 10047, Some("%")),
        (Th07, 10048, Some("%")),
        (Th07, 10049, Some("%")),
        (Th07, 10050, Some("%")),
        (Th07, 10051, Some("%")),
        (Th07, 10052, Some("%")),
        (Th07, 10053, Some("%")),
        (Th07, 10054, Some("%")),
        (Th07, 10055, Some("?")),
        (Th07, 10056, Some("?")),
        (Th07, 10057, Some("%")),
        (Th07, 10058, Some("%")),
        (Th07, 10059, Some("%")),
        (Th07, 10060, Some("%")),
        (Th07, 10061, Some("$")),
        (Th07, 10062, Some("$")),
        (Th07, 10063, Some("%")),
        (Th07, 10064, Some("%")),
        (Th07, 10065, Some("%")),
        (Th07, 10066, Some("$")),
        (Th07, 10067, Some("$")),
        (Th07, 10068, Some("$")),
        (Th07, 10069, Some("$")),
        (Th07, 10070, Some("$")),
        (Th07, 10071, Some("$")),
        (Th07, 10072, Some("%")),
        (Th07, 10073, Some("%")),
    ],
};

static ECL_08_09: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th08, 0, Some(("", None))),
        (Th08, 1, Some(("", None))),
        (Th08, 2, Some(("S", None))),
        (Th08, 3, Some(("S", None))),
        (Th08, 4, Some(("to", Some(IKind::Jmp)))),
        (Th08, 5, Some(("toS", Some(IKind::CountJmp(B::Gt))))),
        (Th08, 6, Some(("SS", Some(IKind::AssignOp(A::Assign, Ty::Int))))),
        (Th08, 7, Some(("ff", Some(IKind::AssignOp(A::Assign, Ty::Float))))),
        (Th08, 8, Some(("SS", None))),
        (Th08, 9, Some(("ff", None))),
        (Th08, 10, Some(("SS", Some(IKind::AssignOp(A::Add, Ty::Int))))),
        (Th08, 11, Some(("SS", Some(IKind::AssignOp(A::Sub, Ty::Int))))),
        (Th08, 12, Some(("SS", Some(IKind::AssignOp(A::Mul, Ty::Int))))),
        (Th08, 13, Some(("SS", Some(IKind::AssignOp(A::Div, Ty::Int))))),
        (Th08, 14, Some(("SS", Some(IKind::AssignOp(A::Rem, Ty::Int))))),
        (Th08, 15, Some(("ff", Some(IKind::AssignOp(A::Add, Ty::Float))))),
        (Th08, 16, Some(("ff", Some(IKind::AssignOp(A::Sub, Ty::Float))))),
        (Th08, 17, Some(("ff", Some(IKind::AssignOp(A::Mul, Ty::Float))))),
        (Th08, 18, Some(("ff", Some(IKind::AssignOp(A::Div, Ty::Float))))),
        (Th08, 19, Some(("ff", Some(IKind::AssignOp(A::Rem, Ty::Float))))),
        (Th08, 20, Some(("SSS", Some(IKind::BinOp(B::Add, Ty::Int))))),
        (Th08, 21, Some(("SSS", Some(IKind::BinOp(B::Sub, Ty::Int))))),
        (Th08, 22, Some(("SSS", Some(IKind::BinOp(B::Mul, Ty::Int))))),
        (Th08, 23, Some(("SSS", Some(IKind::BinOp(B::Div, Ty::Int))))),
        (Th08, 24, Some(("SSS", Some(IKind::BinOp(B::Rem, Ty::Int))))),
        (Th08, 25, Some(("fff", Some(IKind::BinOp(B::Add, Ty::Float))))),
        (Th08, 26, Some(("fff", Some(IKind::BinOp(B::Sub, Ty::Float))))),
        (Th08, 27, Some(("fff", Some(IKind::BinOp(B::Mul, Ty::Float))))),
        (Th08, 28, Some(("fff", Some(IKind::BinOp(B::Div, Ty::Float))))),
        (Th08, 29, Some(("fff", Some(IKind::BinOp(B::Rem, Ty::Float))))),
        (Th08, 30, Some(("S", None))), // Some(IKind::UnOp(U::Inc, Ty::Int))
        (Th08, 31, Some(("S", None))), // Some(IKind::UnOp(U::Dec, Ty::Int))
        (Th08, 32, Some(("ff", Some(IKind::UnOp(U::Sin, Ty::Float))))),
        (Th08, 33, Some(("ff", Some(IKind::UnOp(U::Cos, Ty::Float))))),
        (Th08, 34, Some(("fffff", None))),
        (Th08, 35, Some(("ffff", None))),
        (Th08, 36, Some(("fSSSffff", None))),
        (Th08, 37, Some(("f", None))),
        (Th08, 38, Some(("ffff", None))),
        (Th08, 39, Some(("fffff", None))),
        (Th08, 40, Some(("SSto", Some(IKind::CondJmp(B::Eq, Ty::Int))))),
        (Th08, 41, Some(("ffto", Some(IKind::CondJmp(B::Eq, Ty::Float))))),
        (Th08, 42, Some(("SSto", Some(IKind::CondJmp(B::Ne, Ty::Int))))),
        (Th08, 43, Some(("ffto", Some(IKind::CondJmp(B::Ne, Ty::Float))))),
        (Th08, 44, Some(("SSto", Some(IKind::CondJmp(B::Lt, Ty::Int))))),
        (Th08, 45, Some(("ffto", Some(IKind::CondJmp(B::Lt, Ty::Float))))),
        (Th08, 46, Some(("SSto", Some(IKind::CondJmp(B::Le, Ty::Int))))),
        (Th08, 47, Some(("ffto", Some(IKind::CondJmp(B::Le, Ty::Float))))),
        (Th08, 48, Some(("SSto", Some(IKind::CondJmp(B::Gt, Ty::Int))))),
        (Th08, 49, Some(("ffto", Some(IKind::CondJmp(B::Gt, Ty::Float))))),
        (Th08, 50, Some(("SSto", Some(IKind::CondJmp(B::Ge, Ty::Int))))),
        (Th08, 51, Some(("ffto", Some(IKind::CondJmp(B::Ge, Ty::Float))))),
        (Th08, 52, Some(("E(imm)", Some(IKind::CallReg)))),
        (Th08, 53, Some(("", None))), // Some(IKind::Return)
        (Th08, 54, Some(("N", None))),
        (Th08, 55, Some(("N", None))),
        (Th08, 56, Some(("NNNNNN", None))),
        (Th08, 57, Some(("SN", None))),
        (Th08, 58, Some(("N", None))),
        (Th08, 59, Some(("N", None))),
        (Th08, 60, Some(("NNNNNN", None))),
        (Th08, 61, Some(("SN", None))),
        (Th08, 62, Some(("", None))),
        (Th08, 63, Some(("ff", None))),
        (Th08, 64, Some(("SSff", None))),
        (Th08, 65, Some(("ff", None))),
        (Th08, 66, Some(("SSff", None))),
        (Th08, 67, Some(("SSf", None))),
        (Th08, 68, Some(("ff", None))),
        (Th08, 69, Some(("SSff", None))),
        (Th08, 70, Some(("f", None))),
        (Th08, 71, Some(("f", None))),
        (Th08, 72, Some(("Sffffff", None))),
        (Th08, 73, Some(("Sfff", None))),
        (Th08, 74, Some(("Sff", None))),
        (Th08, 75, Some(("ffff", None))),
        (Th08, 76, Some(("", None))),
        (Th08, 77, Some(("ff", None))),
        (Th08, 78, Some(("ff", None))),
        (Th08, 79, Some(("U(hex)", None))),
        (Th08, 80, Some(("U(hex)", None))),
        (Th08, 81, Some(("U(hex)", None))),
        (Th08, 82, Some(("f", None))),
        (Th08, 83, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th08, 86, Some(("SSS", None))),
        (Th08, 87, Some(("ffS", None))),
        (Th08, 88, Some(("SE(imm)", None))),
        (Th08, 89, Some(("SS", None))),
        (Th08, 90, Some(("E(imm)ffSSS", None))),
        (Th08, 91, Some(("E(imm)ffSSS", None))),
        (Th08, 92, Some(("E(imm)ffSSS", None))),
        (Th08, 93, Some(("E(imm)fffSSS", None))),
        (Th08, 94, Some(("E(imm)fffSSS", None))),
        (Th08, 95, Some(("", None))),
        (Th08, 96, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 97, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 98, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 99, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 100, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 101, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 102, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 103, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 104, Some(("ssSSffffU(imm;hex)", None))),
        (Th08, 105, Some(("S", None))),
        (Th08, 106, Some(("S", None))),
        (Th08, 107, Some(("", None))),
        (Th08, 108, Some(("", None))),
        (Th08, 109, Some(("", None))),
        (Th08, 110, Some(("ff", None))),
        (Th08, 111, Some((r#"SU(hex)U(enum="bool")SSff"#, None))),
        (Th08, 112, Some(("", None))),
        (Th08, 113, Some(("SS", None))),
        (Th08, 114, Some(("s(imm)sffffffSSSS(imm)S(imm)U(imm;hex)", None))),
        (Th08, 115, Some(("s(imm)sffffffSSSS(imm)S(imm)U(imm;hex)", None))),
        (Th08, 116, Some(("S", None))),
        (Th08, 117, Some(("Sf", None))),
        (Th08, 118, Some(("Sf", None))),
        (Th08, 119, Some(("Sfff", None))),
        (Th08, 120, Some(("S", None))),
        (Th08, 121, Some(("S", None))),
        (Th08, 122, Some(("s(imm)u(imm)S(imm)m(len=48;mask=0xaa,0,0)m(len=48;mask=0xbb,0,0)m(len=64;nulless;mask=0xdd,0,0)m(len=64;nulless;mask=0xee,0,0)", None))),
        (Th08, 123, Some(("", None))),
        (Th08, 124, Some(("S", None))),
        (Th08, 125, Some(("S", None))),
        (Th08, 126, Some(("ES", None))),
        (Th08, 127, Some(("S", None))),
        (Th08, 128, Some(("S(imm)f(imm)f(imm)f(imm)f(imm)", None))), // Argument 1 is unread
        (Th08, 129, Some(("b(imm)---", None))),
        (Th08, 130, Some((r#"s(imm;enum="EclSub")--"#, None))),
        (Th08, 131, Some(("S", None))),
        (Th08, 132, Some(("S", None))),
        (Th08, 133, Some(("SSE", None))),
        (Th08, 134, Some(("SE", None))),
        (Th08, 135, Some(("SE", None))), // Some(IKind::CallRegAsync)
        (Th08, 136, Some(("SS(imm)", None))), // zero: Sv
        (Th08, 137, Some(("SS(imm)", None))), // zero: Sv
        (Th08, 138, Some(("c(imm)b(imm)b(imm)-", None))),
        (Th08, 139, Some(("SUC", None))), // Third argument is read from a pointer for some reason...
        (Th08, 140, Some(("SUCfff", None))), // Also read as a pointer
        (Th08, 141, Some(("S", None))),
        (Th08, 142, Some(("S", None))),
        (Th08, 143, Some(("S", None))),
        (Th08, 144, Some(("SS", None))),
        (Th08, 145, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th08, 146, Some(("S", None))),
        (Th08, 147, Some(("S", None))),
        (Th08, 148, Some(("S", None))),
        (Th08, 149, Some(("S", None))),
        (Th08, 150, Some(("S(imm)s(imm)--", None))),
        (Th08, 151, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th08, 152, Some(("ffSSSS", None))),
        (Th08, 153, Some(("", None))),
        (Th08, 154, Some(("", None))),
        (Th08, 155, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th08, 156, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th08, 157, Some(("b(imm;hex)---SSS", None))),
        (Th08, 158, Some(("SSSC", None))),
        (Th08, 159, Some(("U", None))),
        (Th08, 160, Some(("S", None))),
        (Th08, 161, Some(("f", None))),
        (Th08, 162, Some(("", None))),
        (Th08, 163, Some(("S", None))),
        (Th08, 164, Some((r#"U(enum="bool")fff"#, None))), // zero: U(enum="BitBool")fff
        (Th08, 165, Some(("f", None))),
        (Th08, 166, Some(("ffff", None))),
        (Th08, 167, Some(("Sf", None))),
        (Th08, 168, Some(("S", None))),
        (Th08, 169, Some(("f", None))),
        (Th08, 170, Some((r#"SU(enum="bool")"#, None))),
        (Th08, 171, Some(("Sf", None))),
        (Th08, 172, Some(("Sff", None))),
        (Th08, 173, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th08, 174, Some(("S", None))),
        (Th08, 175, Some((r#"U(enum="bool")"#, None))),
        (Th08, 176, Some((r#"b(imm;enum="bool")---"#, None))), // Argument is never read, so this is just to try and make it look better in the output
        (Th08, 177, Some(("S", None))),
        (Th08, 178, Some(("SSf", None))),
        (Th08, 179, Some(("", None))),
        (Th08, 180, Some(("", None))),
        (Th08, 181, Some(("", None))),
        (Th08, 182, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th08, 183, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th08, 184, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")

        (Th09, 83, None),
        (Th09, 90, None),
        (Th09, 91, None),
        (Th09, 92, None),
        (Th09, 122, None),
        (Th09, 123, None),
        (Th09, 141, None),
        (Th09, 142, None),
        (Th09, 158, None),
        (Th09, 164, None),
        (Th09, 168, None),
        (Th09, 174, None),
        (Th09, 176, None),
        (Th09, 179, None),
        (Th09, 180, None),
        (Th09, 181, None),
        (Th09, 184, None),
        (Th09, 185, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th09, 186, Some(("", None))),
        (Th09, 187, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
    ],
    var: &[
        (Th08, 10000, Some("$")),
        (Th08, 10001, Some("$")),
        (Th08, 10002, Some("$")),
        (Th08, 10003, Some("$")),
        (Th08, 10004, Some("$")),
        (Th08, 10005, Some("$")),
        (Th08, 10006, Some("$")),
        (Th08, 10007, Some("$")),
        (Th08, 10008, Some("$")),
        (Th08, 10009, Some("$")),
        (Th08, 10010, Some("$")),
        (Th08, 10011, Some("$")),
        (Th08, 10012, Some("$")),
        (Th08, 10013, Some("$")),
        (Th08, 10014, Some("$")),
        (Th08, 10015, Some("$")),
        (Th08, 10016, Some("%")),
        (Th08, 10017, Some("%")),
        (Th08, 10018, Some("%")),
        (Th08, 10019, Some("%")),
        (Th08, 10020, Some("%")),
        (Th08, 10021, Some("%")),
        (Th08, 10022, Some("%")),
        (Th08, 10023, Some("%")),
        (Th08, 10024, Some("%")),
        (Th08, 10025, Some("%")),
        (Th08, 10026, Some("%")),
        (Th08, 10027, Some("%")),
        (Th08, 10028, Some("%")),
        (Th08, 10029, Some("%")),
        (Th08, 10030, Some("%")),
        (Th08, 10031, Some("%")),
        (Th08, 10032, Some("$")),
        (Th08, 10033, Some("%")),
        (Th08, 10034, Some("$")),
        (Th08, 10035, Some("%")),
        (Th08, 10036, Some("$")),
        (Th08, 10037, Some("$")),
        (Th08, 10038, Some("$")),
        (Th08, 10039, Some("$")),
        (Th08, 10040, Some("$")),
        (Th08, 10041, Some("$")),
        (Th08, 10042, Some("%")),
        (Th08, 10043, Some("%")),
        (Th08, 10044, Some("%")),
        (Th08, 10045, Some("%")),
        (Th08, 10046, Some("%")),
        (Th08, 10047, Some("%")),
        (Th08, 10048, Some("%")),
        (Th08, 10049, Some("$")),
        (Th08, 10050, Some("%")),
        (Th08, 10051, Some("$")),
        (Th08, 10052, Some("$")),
        (Th08, 10053, Some("$")),
        (Th08, 10054, Some("$")),
        (Th08, 10055, Some("$")),
        (Th08, 10056, Some("$")),
        (Th08, 10057, Some("%")),
        (Th08, 10058, Some("%")),
        (Th08, 10059, Some("%")),
        (Th08, 10060, Some("%")),
        (Th08, 10061, Some("$")),
        (Th08, 10062, Some("$")),
        (Th08, 10063, Some("$")),
        (Th08, 10064, Some("$")),
        (Th08, 10065, Some("%")),
        (Th08, 10066, Some("%")),
        (Th08, 10067, Some("%")),
        (Th08, 10068, Some("%")),
        (Th08, 10069, Some("%")),
        (Th08, 10070, Some("%")),
        (Th08, 10071, Some("%")),
        (Th08, 10072, Some("%")),
        (Th08, 10073, Some("%")),
        (Th08, 10074, Some("%")),
        (Th08, 10075, Some("%")),
        (Th08, 10076, Some("%")),
        (Th08, 10077, Some("%")),
        (Th08, 10078, Some("%")),
        (Th08, 10079, Some("%")),
        (Th08, 10080, Some("%")),
        (Th08, 10081, Some("%")),
        (Th08, 10082, Some("%")),
        (Th08, 10083, Some("$")),
        (Th08, 10084, Some("$")),
        (Th08, 10085, Some("%")),
        (Th08, 10086, Some("%")),
        (Th08, 10087, Some("%")),
        (Th08, 10088, Some("$")),
        (Th08, 10089, Some("$")),
        (Th08, 10090, Some("$")),
        (Th08, 10091, Some("$")),
        (Th08, 10092, Some("$")),
        (Th08, 10093, Some("$")),
        (Th08, 10094, Some("%")),
        (Th08, 10095, Some("%")),
        (Th08, 10096, Some("$")),
        (Th08, 10097, Some("$")),
        (Th08, 10098, Some("$")),
        (Th08, 10099, Some("$")),
        (Th08, 10100, Some("$")),

        (Th09, 10096, None),
        (Th09, 10097, None),
        (Th09, 10098, None),
        (Th09, 10099, None),
        (Th09, 10100, None),
        (Th09, 10101, Some("$")),
    ],
};

static ECL_095: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th095, 0, Some(("", None))),
        (Th095, 1, Some(("", None))),
        (Th095, 2, Some(("S", None))),
        (Th095, 3, Some(("S", None))),
        (Th095, 4, Some(("to", Some(IKind::Jmp)))),
        (Th095, 5, Some(("toS", Some(IKind::CountJmp(B::Gt))))),
        (Th095, 6, Some(("SS", Some(IKind::AssignOp(A::Assign, Ty::Int))))),
        (Th095, 7, Some(("ff", Some(IKind::AssignOp(A::Assign, Ty::Float))))),
        (Th095, 8, Some(("SS", None))),
        (Th095, 9, Some(("ff", None))),
        (Th095, 10, Some(("SS", Some(IKind::AssignOp(A::Add, Ty::Int))))),
        (Th095, 11, Some(("SS", Some(IKind::AssignOp(A::Sub, Ty::Int))))),
        (Th095, 12, Some(("SS", Some(IKind::AssignOp(A::Mul, Ty::Int))))),
        (Th095, 13, Some(("SS", Some(IKind::AssignOp(A::Div, Ty::Int))))),
        (Th095, 14, Some(("SS", Some(IKind::AssignOp(A::Rem, Ty::Int))))),
        (Th095, 15, Some(("ff", Some(IKind::AssignOp(A::Add, Ty::Float))))),
        (Th095, 16, Some(("ff", Some(IKind::AssignOp(A::Sub, Ty::Float))))),
        (Th095, 17, Some(("ff", Some(IKind::AssignOp(A::Mul, Ty::Float))))),
        (Th095, 18, Some(("ff", Some(IKind::AssignOp(A::Div, Ty::Float))))),
        (Th095, 19, Some(("ff", Some(IKind::AssignOp(A::Rem, Ty::Float))))),
        (Th095, 20, Some(("SSS", Some(IKind::BinOp(B::Add, Ty::Int))))),
        (Th095, 21, Some(("SSS", Some(IKind::BinOp(B::Sub, Ty::Int))))),
        (Th095, 22, Some(("SSS", Some(IKind::BinOp(B::Mul, Ty::Int))))),
        (Th095, 23, Some(("SSS", Some(IKind::BinOp(B::Div, Ty::Int))))),
        (Th095, 24, Some(("SSS", Some(IKind::BinOp(B::Rem, Ty::Int))))),
        (Th095, 25, Some(("fff", Some(IKind::BinOp(B::Add, Ty::Float))))),
        (Th095, 26, Some(("fff", Some(IKind::BinOp(B::Sub, Ty::Float))))),
        (Th095, 27, Some(("fff", Some(IKind::BinOp(B::Mul, Ty::Float))))),
        (Th095, 28, Some(("fff", Some(IKind::BinOp(B::Div, Ty::Float))))),
        (Th095, 29, Some(("fff", Some(IKind::BinOp(B::Rem, Ty::Float))))),
        (Th095, 30, Some(("S", None))), // Some(IKind::UnOp(U::Inc, Ty::Int))
        (Th095, 31, Some(("S", None))), // Some(IKind::UnOp(U::Dec, Ty::Int))
        (Th095, 32, Some(("ff", Some(IKind::UnOp(U::Sin, Ty::Float))))),
        (Th095, 33, Some(("ff", Some(IKind::UnOp(U::Cos, Ty::Float))))),
        (Th095, 34, Some(("fffff", None))),
        (Th095, 35, Some(("ffff", None))),
        (Th095, 36, Some(("fSSSffff", None))),
        (Th095, 37, Some(("f", None))),
        (Th095, 38, Some(("ffff", None))),
        (Th095, 39, Some(("fffff", None))),
        (Th095, 40, Some(("SSto", Some(IKind::CondJmp(B::Eq, Ty::Int))))),
        (Th095, 41, Some(("ffto", Some(IKind::CondJmp(B::Eq, Ty::Float))))),
        (Th095, 42, Some(("SSto", Some(IKind::CondJmp(B::Ne, Ty::Int))))),
        (Th095, 43, Some(("ffto", Some(IKind::CondJmp(B::Ne, Ty::Float))))),
        (Th095, 44, Some(("SSto", Some(IKind::CondJmp(B::Lt, Ty::Int))))),
        (Th095, 45, Some(("ffto", Some(IKind::CondJmp(B::Lt, Ty::Float))))),
        (Th095, 46, Some(("SSto", Some(IKind::CondJmp(B::Le, Ty::Int))))),
        (Th095, 47, Some(("ffto", Some(IKind::CondJmp(B::Le, Ty::Float))))),
        (Th095, 48, Some(("SSto", Some(IKind::CondJmp(B::Gt, Ty::Int))))),
        (Th095, 49, Some(("ffto", Some(IKind::CondJmp(B::Gt, Ty::Float))))),
        (Th095, 50, Some(("SSto", Some(IKind::CondJmp(B::Ge, Ty::Int))))),
        (Th095, 51, Some(("ffto", Some(IKind::CondJmp(B::Ge, Ty::Float))))),
        (Th095, 52, Some(("E(imm)", Some(IKind::CallReg)))),
        (Th095, 53, Some(("", None))), // Some(IKind::Return)
        (Th095, 54, Some(("N", None))),
        (Th095, 55, Some(("N", None))),
        (Th095, 56, Some(("NNNNNN", None))),
        (Th095, 58, Some(("N", None))),
        (Th095, 59, Some(("N", None))),
        (Th095, 60, Some(("NNNNNN", None))),
        (Th095, 62, Some(("", None))),
        (Th095, 63, Some(("ff", None))),
        (Th095, 64, Some(("SSff", None))),
        (Th095, 65, Some(("ff", None))),
        (Th095, 66, Some(("SSff", None))),
        (Th095, 67, Some(("SSf", None))),
        (Th095, 68, Some(("ff", None))),
        (Th095, 69, Some(("SSff", None))),
        (Th095, 70, Some(("f", None))),
        (Th095, 71, Some(("f", None))),
        (Th095, 72, Some(("Sffffff", None))),
        (Th095, 73, Some(("Sfff", None))),
        (Th095, 74, Some(("Sff", None))),
        (Th095, 75, Some(("Sfff", None))),
        (Th095, 76, Some(("", None))),
        (Th095, 77, Some(("ff", None))),
        (Th095, 78, Some(("ff", None))),
        (Th095, 79, Some(("U(hex)", None))),
        (Th095, 80, Some(("U(hex)", None))),
        (Th095, 81, Some(("U(hex)", None))),
        (Th095, 82, Some(("f", None))),
        (Th095, 83, Some(("E(imm)", None))),
        (Th095, 84, Some(("E(imm)fff", None))),
        (Th095, 85, Some(("", None))),
        (Th095, 86, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 87, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 88, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 89, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 90, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 91, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 92, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 93, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 94, Some(("ssSSffffU(imm;hex)", None))),
        (Th095, 95, Some(("S", None))),
        (Th095, 96, Some(("S", None))),
        (Th095, 97, Some(("", None))),
        (Th095, 98, Some(("", None))),
        (Th095, 99, Some(("", None))),
        (Th095, 100, Some(("ff", None))),
        (Th095, 101, Some((r#"SU(hex)U(enum="bool")SSff"#, None))),
        (Th095, 102, Some(("", None))),
        (Th095, 103, Some(("SS", None))),
        (Th095, 104, Some(("m(len=48;mask=0xaa,0,0)", None))),
        (Th095, 105, Some(("", None))),
        (Th095, 106, Some(("S", None))),
        (Th095, 107, Some(("S", None))),
        (Th095, 108, Some(("ES", None))),
        (Th095, 109, Some(("S", None))),
        (Th095, 112, Some((r#"s(imm;enum="EclSub")--"#, None))),
        (Th095, 113, Some(("S", None))),
        (Th095, 114, Some(("S", None))),
        (Th095, 115, Some(("SSE", None))),
        (Th095, 116, Some(("SE", None))),
        (Th095, 117, Some(("SE", None))), // Some(IKind::CallRegAsync)
        (Th095, 118, Some(("S", None))), // zero: Sv
        (Th095, 119, Some(("S", None))), // zero: Sv
        (Th095, 120, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th095, 121, Some(("S", None))),
        (Th095, 124, Some(("S", None))),
        (Th095, 126, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th095, 128, Some(("", None))),
        (Th095, 130, Some((r#"b(imm;enum="bool")---"#, None))), // zero: b(imm;enum="BitBool")---
        (Th095, 131, Some(("b(imm;hex)---SSS", None))),
        (Th095, 132, Some(("U", None))),
        (Th095, 133, Some(("S", None))),
        (Th095, 135, Some(("f", None))),
        (Th095, 136, Some(("ffff", None))),
        (Th095, 137, Some(("f", None))),
        (Th095, 138, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th095, 139, Some(("S", None))),
        (Th095, 140, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
        (Th095, 141, Some(("S", None))),
        (Th095, 142, Some(("", None))),
        (Th095, 143, Some((r#"U(enum="bool")S"#, None))), // zero: U(enum="BitBool")S
        (Th095, 144, Some(("S", None))),
        (Th095, 145, Some(("SSffff", None))),
        (Th095, 146, Some(("SSffff", None))),
        (Th095, 147, Some(("SSfffSSSSfU(imm;hex)", None))),
        (Th095, 148, Some(("SSfffSSSSfU(imm;hex)", None))),
        (Th095, 149, Some(("f", None))),
        (Th095, 150, Some(("N", None))),
        (Th095, 151, Some(("SN", None))),
        (Th095, 152, Some(("SS", None))),
        (Th095, 153, Some(("SSfffSSSSfU(imm;hex)", None))),
        (Th095, 154, Some(("SSfffSSSSfU(imm;hex)", None))),
        (Th095, 155, Some(("SSfffSSSSfU(imm;hex)ff", None))),
        (Th095, 156, Some(("SSfffSSSSfU(imm;hex)ff", None))),
        (Th095, 157, Some(("SSfffSSSSfU(imm;hex)ff", None))),
        (Th095, 158, Some((r#"U(enum="bool")"#, None))), // zero: U(enum="BitBool")
    ],
    var: &[
        (Th095, 10000, Some("$")),
        (Th095, 10001, Some("$")),
        (Th095, 10002, Some("$")),
        (Th095, 10003, Some("$")),
        (Th095, 10004, Some("$")),
        (Th095, 10005, Some("$")),
        (Th095, 10006, Some("$")),
        (Th095, 10007, Some("$")),
        (Th095, 10008, Some("%")),
        (Th095, 10009, Some("%")),
        (Th095, 10010, Some("%")),
        (Th095, 10011, Some("%")),
        (Th095, 10012, Some("%")),
        (Th095, 10013, Some("%")),
        (Th095, 10014, Some("%")),
        (Th095, 10015, Some("%")),
        (Th095, 10016, Some("$")),
        (Th095, 10017, Some("%")),
        (Th095, 10018, Some("$")),
        (Th095, 10019, Some("%")),
        (Th095, 10020, Some("$")),
        (Th095, 10021, Some("$")),
        (Th095, 10022, Some("$")),
        (Th095, 10023, Some("$")),
        (Th095, 10026, Some("%")),
        (Th095, 10027, Some("%")),
        (Th095, 10028, Some("%")),
        (Th095, 10029, Some("%")),
        (Th095, 10030, Some("%")),
        (Th095, 10031, Some("%")),
        (Th095, 10032, Some("%")),
        (Th095, 10033, Some("$")),
        (Th095, 10034, Some("%")),
        (Th095, 10035, Some("$")),
        (Th095, 10036, Some("$")),
        (Th095, 10037, Some("$")),
        (Th095, 10038, Some("$")),
        (Th095, 10039, Some("$")),
        (Th095, 10040, Some("%")),
        (Th095, 10041, Some("%")),
        (Th095, 10042, Some("%")),
        (Th095, 10043, Some("%")),
        (Th095, 10044, Some("$")),
        (Th095, 10045, Some("$")),
        (Th095, 10046, Some("$")),
        (Th095, 10047, Some("$")),
        (Th095, 10048, Some("%")),
        (Th095, 10049, Some("%")),
        (Th095, 10050, Some("%")),
        (Th095, 10051, Some("%")),
        (Th095, 10052, Some("%")),
        (Th095, 10053, Some("%")),
        (Th095, 10054, Some("%")),
        (Th095, 10055, Some("%")),
        (Th095, 10056, Some("%")),
        (Th095, 10057, Some("%")),
        (Th095, 10058, Some("%")),
        (Th095, 10059, Some("%")),
        (Th095, 10060, Some("%")),
        (Th095, 10061, Some("%")),
        (Th095, 10062, Some("%")),
        (Th095, 10063, Some("%")),
        (Th095, 10064, Some("%")),
        (Th095, 10065, Some("%")),
        (Th095, 10066, Some("$")),
        (Th095, 10067, Some("$")),
        (Th095, 10068, Some("%")),
        (Th095, 10069, Some("%")),
        (Th095, 10070, Some("%")),
        (Th095, 10071, Some("$")),
        (Th095, 10072, Some("$")),
        (Th095, 10073, Some("$")),
        (Th095, 10074, Some("$")),
        (Th095, 10075, Some("$")),
        (Th095, 10076, Some("$")),
        (Th095, 10077, Some("%")),
        (Th095, 10078, Some("%")),
        (Th095, 10079, Some("%")),
        (Th095, 10080, Some("%")),
        (Th095, 10081, Some("$")),
        (Th095, 10082, Some("%")),
        (Th095, 10083, Some("%")),
        (Th095, 10084, Some("$")),
        (Th095, 10085, Some("%")),
    ],
};


static ECL_10: &'static CoreSignatures = &CoreSignatures {
    inherit: &[],
    ins: &[
        (Th10, 0, Some((r#""#, None))),
        (Th10, 1, Some((r#""#, None))),
        (Th10, 10, Some((r#""#, None))),
        // (Th10, 11, Some((r#"  P(bs=4)v(rep="G")  "#, None))),
        (Th10, 12, Some((r#"  ot  "#, None))),
        (Th10, 13, Some((r#"  ot  "#, None))),
        (Th10, 14, Some((r#"  ot  "#, None))),
        // (Th10, 15, Some((r#"  P(bs=4)v(rep="G")  "#, None))),
        // (Th10, 16, Some((r#"  P(bs=4)Sv(rep="G")  "#, None))),
        (Th10, 17, Some((r#"  S  "#, None))),
        (Th10, 18, Some((r#"  S  "#, None))),
        (Th10, 19, Some((r#"  S  "#, None))),
        (Th10, 20, Some((r#"  SS  "#, None))),
        (Th10, 21, Some((r#""#, None))),
        // (Th10, 30, Some((r#"  Pv(rep="g")  "#, None))),
        (Th10, 40, Some((r#"  S  "#, None))),
        (Th10, 41, Some((r#""#, None))),
        (Th10, 42, Some((r#"  S  "#, None))),
        (Th10, 43, Some((r#"  S  "#, None))),
        (Th10, 44, Some((r#"  f  "#, None))),
        (Th10, 45, Some((r#"  f  "#, None))),
        (Th10, 50, Some((r#""#, None))),
        (Th10, 51, Some((r#""#, None))),
        (Th10, 52, Some((r#""#, None))),
        (Th10, 53, Some((r#""#, None))),
        (Th10, 54, Some((r#""#, None))),
        (Th10, 55, Some((r#""#, None))),
        (Th10, 56, Some((r#""#, None))),
        (Th10, 57, Some((r#""#, None))),
        (Th10, 58, Some((r#""#, None))),
        (Th10, 59, Some((r#""#, None))),
        (Th10, 60, Some((r#""#, None))),
        (Th10, 61, Some((r#""#, None))),
        (Th10, 62, Some((r#""#, None))),
        (Th10, 63, Some((r#""#, None))),
        (Th10, 64, Some((r#""#, None))),
        (Th10, 65, Some((r#""#, None))),
        (Th10, 66, Some((r#""#, None))),
        (Th10, 67, Some((r#""#, None))),
        (Th10, 68, Some((r#""#, None))),
        (Th10, 69, Some((r#""#, None))),
        (Th10, 70, Some((r#""#, None))),
        (Th10, 71, Some((r#""#, None))),
        (Th10, 72, Some((r#""#, None))),
        (Th10, 73, Some((r#""#, None))),
        (Th10, 74, Some((r#""#, None))),
        (Th10, 75, Some((r#""#, None))),
        (Th10, 76, Some((r#""#, None))),
        (Th10, 77, Some((r#""#, None))),
        (Th10, 78, Some((r#"  S  "#, None))),
        (Th10, 79, Some((r#""#, None))),
        (Th10, 80, Some((r#""#, None))),
        (Th10, 81, Some((r#"  ffff  "#, None))),
        (Th10, 82, Some((r#"  f  "#, None))),
        (Th10, 83, Some((r#"  S  "#, None))),
        (Th10, 84, Some((r#""#, None))),
        (Th10, 85, Some((r#""#, None))),
        (Th10, 86, Some((r#"  fff  "#, None))),
        (Th10, 87, Some((r#"  ffff  "#, None))),
        (Th10, 256, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 257, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 258, Some((r#"  S  "#, None))),
        (Th10, 259, Some((r#"  SN  "#, None))),
        (Th10, 260, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 261, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 262, Some((r#"  SN  "#, None))),
        (Th10, 263, Some((r#"  SN  "#, None))),
        (Th10, 264, Some((r#"  SN  "#, None))),
        (Th10, 265, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 266, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 267, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 268, Some((r#"  P(bs=4)ffSSS  "#, None))),
        (Th10, 269, Some((r#"  N  "#, None))),
        (Th10, 270, Some((r#"  P(bs=4)fffSSS  "#, None))),
        (Th10, 271, Some((r#"  P(bs=4)fffSSS  "#, None))),
        (Th10, 272, Some((r#"  SN  "#, None))),
        (Th10, 273, Some((r#"  SNf  "#, None))),
        (Th10, 280, Some((r#"  ff  "#, None))),
        (Th10, 281, Some((r#"  SSff  "#, None))),
        (Th10, 282, Some((r#"  ff  "#, None))),
        (Th10, 283, Some((r#"  SSff  "#, None))),
        (Th10, 284, Some((r#"  ff  "#, None))),
        (Th10, 285, Some((r#"  SSff  "#, None))),
        (Th10, 286, Some((r#"  ff  "#, None))),
        (Th10, 287, Some((r#"  SSff  "#, None))),
        (Th10, 288, Some((r#"  ffff  "#, None))),
        (Th10, 289, Some((r#"  SSffff  "#, None))),
        (Th10, 290, Some((r#"  ffff  "#, None))),
        (Th10, 291, Some((r#"  SSffff  "#, None))),
        (Th10, 292, Some((r#"  SSf  "#, None))),
        (Th10, 293, Some((r#"  SSf  "#, None))),
        (Th10, 294, Some((r#""#, None))),
        (Th10, 295, Some((r#""#, None))),
        (Th10, 296, Some((r#"  fff  "#, None))),
        (Th10, 297, Some((r#"  fff  "#, None))),
        (Th10, 298, Some((r#"  ff  "#, None))),
        (Th10, 299, Some((r#"  ff  "#, None))),
        (Th10, 320, Some((r#"  ff  "#, None))),
        (Th10, 321, Some((r#"  ff  "#, None))),
        (Th10, 322, Some((r#"  S  "#, None))),
        (Th10, 323, Some((r#"  S  "#, None))),
        (Th10, 324, Some((r#"  ffff  "#, None))),
        (Th10, 325, Some((r#""#, None))),
        (Th10, 326, Some((r#""#, None))),
        (Th10, 327, Some((r#"  SS  "#, None))),
        (Th10, 328, Some((r#"  ff  "#, None))),
        (Th10, 329, Some((r#""#, None))),
        (Th10, 330, Some((r#"  S  "#, None))),
        (Th10, 331, Some((r#"  S  "#, None))),
        (Th10, 332, Some((r#"  S  "#, None))),
        (Th10, 333, Some((r#""#, None))),
        (Th10, 334, Some((r#"  SSSP(bs=4)  "#, None))),
        (Th10, 335, Some((r#"  S  "#, None))),
        (Th10, 336, Some((r#"  S  "#, None))),
        (Th10, 337, Some((r#"  SSS  "#, None))),
        // (Th10, 338, Some((r#"  M  "#, None))),
        (Th10, 339, Some((r#""#, None))),
        (Th10, 340, Some((r#""#, None))),
        (Th10, 341, Some((r#"  SP(bs=4)  "#, None))),
        (Th10, 342, Some((r#"  SSSp(bs=4;mask=0x77,7,16)  "#, None))),
        (Th10, 343, Some((r#""#, None))),
        (Th10, 344, Some((r#"  S  "#, None))),
        (Th10, 345, Some((r#""#, None))),
        (Th10, 346, Some((r#"  f  "#, None))),
        (Th10, 347, Some((r#"  SfC  "#, None))),
        (Th10, 348, Some((r#"  SSSp(bs=4;mask=0x77,7,16)  "#, None))),
        (Th10, 349, Some((r#"  fff  "#, None))),
        (Th10, 350, Some((r#"  fffff  "#, None))),
        (Th10, 351, Some((r#"  fff  "#, None))),
        (Th10, 352, Some((r#"  SSS  "#, None))),
        (Th10, 353, Some((r#"  SSSSS  "#, None))),
        (Th10, 354, Some((r#"  SSS  "#, None))),
        (Th10, 355, Some((r#"  SSSSS  "#, None))),
        (Th10, 356, Some((r#"  fffff  "#, None))),
        (Th10, 357, Some((r#"  SSSp(bs=4;mask=0x77,7,16)  "#, None))),
        (Th10, 358, Some((r#"  SSSp(bs=4;mask=0x77,7,16)  "#, None))),
        (Th10, 359, Some((r#"  SSSp(bs=4;mask=0x77,7,16)  "#, None))),
        (Th10, 360, Some((r#"  S  "#, None))),
        (Th10, 361, Some((r#"  S  "#, None))),
        (Th10, 362, Some((r#""#, None))),
        (Th10, 363, Some((r#""#, None))),
        (Th10, 364, Some((r#"  S(enum="bool")  "#, None))),
        (Th10, 365, Some((r#""#, None))),
        (Th10, 366, Some((r#"  S(enum="bool")S  "#, None))),
        (Th10, 367, Some((r#"  f  "#, None))),
        (Th10, 368, Some((r#"  SSSS  "#, None))),
        (Th10, 400, Some((r#"  S  "#, None))),
        (Th10, 401, Some((r#"  S  "#, None))),
        (Th10, 402, Some((r#"  SSS  "#, None))),
        (Th10, 403, Some((r#"  Sff  "#, None))),
        (Th10, 404, Some((r#"  Sff  "#, None))),
        (Th10, 405, Some((r#"  Sff  "#, None))),
        (Th10, 406, Some((r#"  SSS  "#, None))),
        (Th10, 407, Some((r#"  SS  "#, None))),
        (Th10, 408, Some((r#"  SSS  "#, None))),
        (Th10, 409, Some((r#"  SSSSSSff  "#, None))),
        (Th10, 410, Some((r#""#, None))),
        (Th10, 411, Some((r#"  SS  "#, None))),
        (Th10, 412, Some((r#"  SSffffff  "#, None))),
        (Th10, 413, Some((r#"  SSSfffSSSSfS  "#, None))),
        (Th10, 414, Some((r#"  Sff  "#, None))),
        (Th10, 415, Some((r#"  Sff  "#, None))),
        (Th10, 416, Some((r#"  Sf  "#, None))),
        (Th10, 417, Some((r#"  Sf  "#, None))),
        (Th10, 418, Some((r#"  Sf  "#, None))),
        (Th10, 419, Some((r#"  Sf  "#, None))),
        (Th10, 420, Some((r#"  f  "#, None))),
        (Th10, 421, Some((r#"  f  "#, None))),
        (Th10, 422, Some((r#"  Sffffff  "#, None))),
        (Th10, 423, Some((r#"  Sffffffffff  "#, None))),
        (Th10, 424, Some((r#"  Sffff  "#, None))),
        (Th10, 425, Some((r#"  SSSSSSS  "#, None))),
        (Th10, 426, Some((r#"  SSSSSSSSSSS  "#, None))),
        (Th10, 427, Some((r#"  SSSSS  "#, None))),
        (Th10, 428, Some((r#"  SSffffff  "#, None))),
        (Th10, 429, Some((r#"  SSSfffSSSSfS  "#, None))),
        (Th10, 430, Some((r#"  fff  "#, None))),
        (Th10, 431, Some((r#"  SSffffff  "#, None))),
        (Th10, 432, Some((r#"  SSSfffSSSSfS  "#, None))),
        (Th10, 433, Some((r#"  SSffffff  "#, None))),
        (Th10, 434, Some((r#"  SSSfffSSSSfS  "#, None))),
        (Th10, 435, Some((r#"  Sffffffff  "#, None))),
        (Th10, 436, Some((r#"  SSSSSSSSS  "#, None))),
    ],
    var: &[
        // TODO
    ],
};
